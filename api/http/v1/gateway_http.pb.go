// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: http/v1/gateway.proto

package v1

import (
	common "api_gateway_service/api/common"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGatewayAddAddress = "/api.http.v1.Gateway/AddAddress"
const OperationGatewayAddPaymentMethod = "/api.http.v1.Gateway/AddPaymentMethod"
const OperationGatewayDelAddress = "/api.http.v1.Gateway/DelAddress"
const OperationGatewayDelPaymentMethod = "/api.http.v1.Gateway/DelPaymentMethod"
const OperationGatewayGetAccountInfo = "/api.http.v1.Gateway/GetAccountInfo"
const OperationGatewayListAddress = "/api.http.v1.Gateway/ListAddress"
const OperationGatewayListPaymentMethods = "/api.http.v1.Gateway/ListPaymentMethods"
const OperationGatewayRegisterAccount = "/api.http.v1.Gateway/RegisterAccount"
const OperationGatewayUpdateAccount = "/api.http.v1.Gateway/UpdateAccount"
const OperationGatewayUpdateAddress = "/api.http.v1.Gateway/UpdateAddress"
const OperationGatewayUpdatePaymentMethod = "/api.http.v1.Gateway/UpdatePaymentMethod"

type GatewayHTTPServer interface {
	AddAddress(context.Context, *AddAddressReq) (*common.Res, error)
	AddPaymentMethod(context.Context, *AddPaymentMethodReq) (*common.Res, error)
	DelAddress(context.Context, *DelAddressReq) (*common.Res, error)
	DelPaymentMethod(context.Context, *DelPaymentMethodReq) (*common.Res, error)
	// GetAccountInfo 通用读取账户信息
	GetAccountInfo(context.Context, *GetAccountInfoReq) (*common.Res, error)
	// ListAddress 地址簿
	ListAddress(context.Context, *ListAddressReq) (*common.Res, error)
	// ListPaymentMethods 支付管理
	ListPaymentMethods(context.Context, *ListPaymentMethodsReq) (*common.Res, error)
	// RegisterAccount 注册账户
	RegisterAccount(context.Context, *RegisterAccountReq) (*common.Res, error)
	// UpdateAccount 更新用户账户数据
	UpdateAccount(context.Context, *UpdateAccountReq) (*common.Res, error)
	UpdateAddress(context.Context, *UpdateAddressReq) (*common.Res, error)
	UpdatePaymentMethod(context.Context, *UpdatePaymentMethodReq) (*common.Res, error)
}

func RegisterGatewayHTTPServer(s *http.Server, srv GatewayHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/account/register", _Gateway_RegisterAccount0_HTTP_Handler(srv))
	r.GET("/v1/user/account/info/{uid}", _Gateway_GetAccountInfo0_HTTP_Handler(srv))
	r.GET("/v1/user/account/info", _Gateway_GetAccountInfo1_HTTP_Handler(srv))
	r.POST("/v1/user/account/update", _Gateway_UpdateAccount0_HTTP_Handler(srv))
	r.GET("/v1/user/address/list", _Gateway_ListAddress0_HTTP_Handler(srv))
	r.POST("/v1/user/address/add", _Gateway_AddAddress0_HTTP_Handler(srv))
	r.POST("/v1/user/address/update", _Gateway_UpdateAddress0_HTTP_Handler(srv))
	r.POST("/v1/user/address/delete", _Gateway_DelAddress0_HTTP_Handler(srv))
	r.GET("/v1/user/payment/list", _Gateway_ListPaymentMethods0_HTTP_Handler(srv))
	r.POST("/v1/user/payment/add", _Gateway_AddPaymentMethod0_HTTP_Handler(srv))
	r.POST("/v1/user/payment/update", _Gateway_UpdatePaymentMethod0_HTTP_Handler(srv))
	r.POST("/v1/user/payment/delete", _Gateway_DelPaymentMethod0_HTTP_Handler(srv))
}

func _Gateway_RegisterAccount0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterAccountReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayRegisterAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterAccount(ctx, req.(*RegisterAccountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

func _Gateway_GetAccountInfo0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayGetAccountInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccountInfo(ctx, req.(*GetAccountInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

func _Gateway_GetAccountInfo1_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayGetAccountInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccountInfo(ctx, req.(*GetAccountInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

func _Gateway_UpdateAccount0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayUpdateAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccount(ctx, req.(*UpdateAccountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

func _Gateway_ListAddress0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAddressReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayListAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAddress(ctx, req.(*ListAddressReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

func _Gateway_AddAddress0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAddressReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayAddAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAddress(ctx, req.(*AddAddressReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

func _Gateway_UpdateAddress0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAddressReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayUpdateAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAddress(ctx, req.(*UpdateAddressReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

func _Gateway_DelAddress0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelAddressReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayDelAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelAddress(ctx, req.(*DelAddressReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

func _Gateway_ListPaymentMethods0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPaymentMethodsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayListPaymentMethods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPaymentMethods(ctx, req.(*ListPaymentMethodsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

func _Gateway_AddPaymentMethod0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddPaymentMethodReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayAddPaymentMethod)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddPaymentMethod(ctx, req.(*AddPaymentMethodReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

func _Gateway_UpdatePaymentMethod0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePaymentMethodReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayUpdatePaymentMethod)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePaymentMethod(ctx, req.(*UpdatePaymentMethodReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

func _Gateway_DelPaymentMethod0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelPaymentMethodReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayDelPaymentMethod)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelPaymentMethod(ctx, req.(*DelPaymentMethodReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Res)
		return ctx.Result(200, reply)
	}
}

type GatewayHTTPClient interface {
	AddAddress(ctx context.Context, req *AddAddressReq, opts ...http.CallOption) (rsp *common.Res, err error)
	AddPaymentMethod(ctx context.Context, req *AddPaymentMethodReq, opts ...http.CallOption) (rsp *common.Res, err error)
	DelAddress(ctx context.Context, req *DelAddressReq, opts ...http.CallOption) (rsp *common.Res, err error)
	DelPaymentMethod(ctx context.Context, req *DelPaymentMethodReq, opts ...http.CallOption) (rsp *common.Res, err error)
	GetAccountInfo(ctx context.Context, req *GetAccountInfoReq, opts ...http.CallOption) (rsp *common.Res, err error)
	ListAddress(ctx context.Context, req *ListAddressReq, opts ...http.CallOption) (rsp *common.Res, err error)
	ListPaymentMethods(ctx context.Context, req *ListPaymentMethodsReq, opts ...http.CallOption) (rsp *common.Res, err error)
	RegisterAccount(ctx context.Context, req *RegisterAccountReq, opts ...http.CallOption) (rsp *common.Res, err error)
	UpdateAccount(ctx context.Context, req *UpdateAccountReq, opts ...http.CallOption) (rsp *common.Res, err error)
	UpdateAddress(ctx context.Context, req *UpdateAddressReq, opts ...http.CallOption) (rsp *common.Res, err error)
	UpdatePaymentMethod(ctx context.Context, req *UpdatePaymentMethodReq, opts ...http.CallOption) (rsp *common.Res, err error)
}

type GatewayHTTPClientImpl struct {
	cc *http.Client
}

func NewGatewayHTTPClient(client *http.Client) GatewayHTTPClient {
	return &GatewayHTTPClientImpl{client}
}

func (c *GatewayHTTPClientImpl) AddAddress(ctx context.Context, in *AddAddressReq, opts ...http.CallOption) (*common.Res, error) {
	var out common.Res
	pattern := "/v1/user/address/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayAddAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) AddPaymentMethod(ctx context.Context, in *AddPaymentMethodReq, opts ...http.CallOption) (*common.Res, error) {
	var out common.Res
	pattern := "/v1/user/payment/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayAddPaymentMethod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) DelAddress(ctx context.Context, in *DelAddressReq, opts ...http.CallOption) (*common.Res, error) {
	var out common.Res
	pattern := "/v1/user/address/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayDelAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) DelPaymentMethod(ctx context.Context, in *DelPaymentMethodReq, opts ...http.CallOption) (*common.Res, error) {
	var out common.Res
	pattern := "/v1/user/payment/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayDelPaymentMethod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...http.CallOption) (*common.Res, error) {
	var out common.Res
	pattern := "/v1/user/account/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayGetAccountInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) ListAddress(ctx context.Context, in *ListAddressReq, opts ...http.CallOption) (*common.Res, error) {
	var out common.Res
	pattern := "/v1/user/address/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayListAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsReq, opts ...http.CallOption) (*common.Res, error) {
	var out common.Res
	pattern := "/v1/user/payment/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayListPaymentMethods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) RegisterAccount(ctx context.Context, in *RegisterAccountReq, opts ...http.CallOption) (*common.Res, error) {
	var out common.Res
	pattern := "/v1/user/account/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayRegisterAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...http.CallOption) (*common.Res, error) {
	var out common.Res
	pattern := "/v1/user/account/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayUpdateAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...http.CallOption) (*common.Res, error) {
	var out common.Res
	pattern := "/v1/user/address/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayUpdateAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) UpdatePaymentMethod(ctx context.Context, in *UpdatePaymentMethodReq, opts ...http.CallOption) (*common.Res, error) {
	var out common.Res
	pattern := "/v1/user/payment/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayUpdatePaymentMethod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
