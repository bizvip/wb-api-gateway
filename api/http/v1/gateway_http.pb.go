// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: http/v1/gateway.proto

package v1

import (
	common "api_gateway_service/api/common"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAccountGetAccount = "/api.http.v1.Account/GetAccount"
const OperationAccountRegisterAccount = "/api.http.v1.Account/RegisterAccount"
const OperationAccountUpdateAccount = "/api.http.v1.Account/UpdateAccount"

type AccountHTTPServer interface {
	// GetAccount 读取账户
	GetAccount(context.Context, *GetAccountRequest) (*common.Reply, error)
	// RegisterAccount 注册账户
	RegisterAccount(context.Context, *RegisterAccountRequest) (*common.Reply, error)
	// UpdateAccount 更新账户
	UpdateAccount(context.Context, *UpdateAccountRequest) (*common.Reply, error)
}

func RegisterAccountHTTPServer(s *http.Server, srv AccountHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/accounts", _Account_RegisterAccount0_HTTP_Handler(srv))
	r.GET("/v1/user/accounts/{uid}", _Account_GetAccount0_HTTP_Handler(srv))
	r.PUT("/v1/user/accounts/{uid}", _Account_UpdateAccount0_HTTP_Handler(srv))
}

func _Account_RegisterAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountRegisterAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterAccount(ctx, req.(*RegisterAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

func _Account_GetAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountGetAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccount(ctx, req.(*GetAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

func _Account_UpdateAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountUpdateAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccount(ctx, req.(*UpdateAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

type AccountHTTPClient interface {
	GetAccount(ctx context.Context, req *GetAccountRequest, opts ...http.CallOption) (rsp *common.Reply, err error)
	RegisterAccount(ctx context.Context, req *RegisterAccountRequest, opts ...http.CallOption) (rsp *common.Reply, err error)
	UpdateAccount(ctx context.Context, req *UpdateAccountRequest, opts ...http.CallOption) (rsp *common.Reply, err error)
}

type AccountHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountHTTPClient(client *http.Client) AccountHTTPClient {
	return &AccountHTTPClientImpl{client}
}

func (c *AccountHTTPClientImpl) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/accounts/{uid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountGetAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountHTTPClientImpl) RegisterAccount(ctx context.Context, in *RegisterAccountRequest, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/accounts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountRegisterAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountHTTPClientImpl) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/accounts/{uid}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountUpdateAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationAddressesAddAddress = "/api.http.v1.Addresses/AddAddress"
const OperationAddressesDeleteAddress = "/api.http.v1.Addresses/DeleteAddress"
const OperationAddressesGetAddress = "/api.http.v1.Addresses/GetAddress"
const OperationAddressesListAddresses = "/api.http.v1.Addresses/ListAddresses"
const OperationAddressesUpdateAddress = "/api.http.v1.Addresses/UpdateAddress"

type AddressesHTTPServer interface {
	// AddAddress 添加地址
	AddAddress(context.Context, *AddAddressRequest) (*common.Reply, error)
	// DeleteAddress 删除地址
	DeleteAddress(context.Context, *DeleteAddressRequest) (*common.Reply, error)
	// GetAddress 读取单条地址
	GetAddress(context.Context, *GetAddressRequest) (*common.Reply, error)
	// ListAddresses 地址簿列表
	ListAddresses(context.Context, *emptypb.Empty) (*common.Reply, error)
	// UpdateAddress 更新地址
	UpdateAddress(context.Context, *UpdateAddressRequest) (*common.Reply, error)
}

func RegisterAddressesHTTPServer(s *http.Server, srv AddressesHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/user/addresses", _Addresses_ListAddresses0_HTTP_Handler(srv))
	r.GET("/v1/user/addresses/{id}", _Addresses_GetAddress0_HTTP_Handler(srv))
	r.POST("/v1/user/addresses", _Addresses_AddAddress0_HTTP_Handler(srv))
	r.PUT("/v1/user/addresses/{id}", _Addresses_UpdateAddress0_HTTP_Handler(srv))
	r.DELETE("/v1/user/addresses/{id}", _Addresses_DeleteAddress0_HTTP_Handler(srv))
}

func _Addresses_ListAddresses0_HTTP_Handler(srv AddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressesListAddresses)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAddresses(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

func _Addresses_GetAddress0_HTTP_Handler(srv AddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressesGetAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddress(ctx, req.(*GetAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

func _Addresses_AddAddress0_HTTP_Handler(srv AddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressesAddAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAddress(ctx, req.(*AddAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

func _Addresses_UpdateAddress0_HTTP_Handler(srv AddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressesUpdateAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAddress(ctx, req.(*UpdateAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

func _Addresses_DeleteAddress0_HTTP_Handler(srv AddressesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressesDeleteAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAddress(ctx, req.(*DeleteAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

type AddressesHTTPClient interface {
	AddAddress(ctx context.Context, req *AddAddressRequest, opts ...http.CallOption) (rsp *common.Reply, err error)
	DeleteAddress(ctx context.Context, req *DeleteAddressRequest, opts ...http.CallOption) (rsp *common.Reply, err error)
	GetAddress(ctx context.Context, req *GetAddressRequest, opts ...http.CallOption) (rsp *common.Reply, err error)
	ListAddresses(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *common.Reply, err error)
	UpdateAddress(ctx context.Context, req *UpdateAddressRequest, opts ...http.CallOption) (rsp *common.Reply, err error)
}

type AddressesHTTPClientImpl struct {
	cc *http.Client
}

func NewAddressesHTTPClient(client *http.Client) AddressesHTTPClient {
	return &AddressesHTTPClientImpl{client}
}

func (c *AddressesHTTPClientImpl) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/addresses"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAddressesAddAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AddressesHTTPClientImpl) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/addresses/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAddressesDeleteAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AddressesHTTPClientImpl) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/addresses/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAddressesGetAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AddressesHTTPClientImpl) ListAddresses(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/addresses"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAddressesListAddresses))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AddressesHTTPClientImpl) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/addresses/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAddressesUpdateAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationReceivingMethodsAddReceivingMethod = "/api.http.v1.ReceivingMethods/AddReceivingMethod"
const OperationReceivingMethodsDeleteReceivingMethod = "/api.http.v1.ReceivingMethods/DeleteReceivingMethod"
const OperationReceivingMethodsGetReceivingMethod = "/api.http.v1.ReceivingMethods/GetReceivingMethod"
const OperationReceivingMethodsListReceivingMethods = "/api.http.v1.ReceivingMethods/ListReceivingMethods"
const OperationReceivingMethodsUpdateReceivingMethod = "/api.http.v1.ReceivingMethods/UpdateReceivingMethod"

type ReceivingMethodsHTTPServer interface {
	// AddReceivingMethod 添加收款方式
	AddReceivingMethod(context.Context, *AddReceivingMethodRequest) (*common.Reply, error)
	// DeleteReceivingMethod 删除收款方式
	DeleteReceivingMethod(context.Context, *DeleteReceivingMethodRequest) (*common.Reply, error)
	// GetReceivingMethod 获取单个收款方式
	GetReceivingMethod(context.Context, *GetReceivingMethodRequest) (*common.Reply, error)
	// ListReceivingMethods 收款方式列表
	ListReceivingMethods(context.Context, *emptypb.Empty) (*common.Reply, error)
	// UpdateReceivingMethod 更新收款方式
	UpdateReceivingMethod(context.Context, *UpdateReceivingMethodRequest) (*common.Reply, error)
}

func RegisterReceivingMethodsHTTPServer(s *http.Server, srv ReceivingMethodsHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/user/receiving-methods", _ReceivingMethods_ListReceivingMethods0_HTTP_Handler(srv))
	r.GET("/v1/user/receiving-methods/{id}", _ReceivingMethods_GetReceivingMethod0_HTTP_Handler(srv))
	r.POST("/v1/user/receiving-methods", _ReceivingMethods_AddReceivingMethod0_HTTP_Handler(srv))
	r.PUT("/v1/user/receiving-methods/{id}", _ReceivingMethods_UpdateReceivingMethod0_HTTP_Handler(srv))
	r.DELETE("/v1/user/receiving-methods/{id}", _ReceivingMethods_DeleteReceivingMethod0_HTTP_Handler(srv))
}

func _ReceivingMethods_ListReceivingMethods0_HTTP_Handler(srv ReceivingMethodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceivingMethodsListReceivingMethods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListReceivingMethods(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

func _ReceivingMethods_GetReceivingMethod0_HTTP_Handler(srv ReceivingMethodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReceivingMethodRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceivingMethodsGetReceivingMethod)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReceivingMethod(ctx, req.(*GetReceivingMethodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

func _ReceivingMethods_AddReceivingMethod0_HTTP_Handler(srv ReceivingMethodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddReceivingMethodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceivingMethodsAddReceivingMethod)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddReceivingMethod(ctx, req.(*AddReceivingMethodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

func _ReceivingMethods_UpdateReceivingMethod0_HTTP_Handler(srv ReceivingMethodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateReceivingMethodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceivingMethodsUpdateReceivingMethod)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateReceivingMethod(ctx, req.(*UpdateReceivingMethodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

func _ReceivingMethods_DeleteReceivingMethod0_HTTP_Handler(srv ReceivingMethodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteReceivingMethodRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReceivingMethodsDeleteReceivingMethod)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteReceivingMethod(ctx, req.(*DeleteReceivingMethodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Reply)
		return ctx.Result(200, reply)
	}
}

type ReceivingMethodsHTTPClient interface {
	AddReceivingMethod(ctx context.Context, req *AddReceivingMethodRequest, opts ...http.CallOption) (rsp *common.Reply, err error)
	DeleteReceivingMethod(ctx context.Context, req *DeleteReceivingMethodRequest, opts ...http.CallOption) (rsp *common.Reply, err error)
	GetReceivingMethod(ctx context.Context, req *GetReceivingMethodRequest, opts ...http.CallOption) (rsp *common.Reply, err error)
	ListReceivingMethods(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *common.Reply, err error)
	UpdateReceivingMethod(ctx context.Context, req *UpdateReceivingMethodRequest, opts ...http.CallOption) (rsp *common.Reply, err error)
}

type ReceivingMethodsHTTPClientImpl struct {
	cc *http.Client
}

func NewReceivingMethodsHTTPClient(client *http.Client) ReceivingMethodsHTTPClient {
	return &ReceivingMethodsHTTPClientImpl{client}
}

func (c *ReceivingMethodsHTTPClientImpl) AddReceivingMethod(ctx context.Context, in *AddReceivingMethodRequest, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/receiving-methods"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationReceivingMethodsAddReceivingMethod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReceivingMethodsHTTPClientImpl) DeleteReceivingMethod(ctx context.Context, in *DeleteReceivingMethodRequest, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/receiving-methods/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReceivingMethodsDeleteReceivingMethod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReceivingMethodsHTTPClientImpl) GetReceivingMethod(ctx context.Context, in *GetReceivingMethodRequest, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/receiving-methods/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReceivingMethodsGetReceivingMethod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReceivingMethodsHTTPClientImpl) ListReceivingMethods(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/receiving-methods"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReceivingMethodsListReceivingMethods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReceivingMethodsHTTPClientImpl) UpdateReceivingMethod(ctx context.Context, in *UpdateReceivingMethodRequest, opts ...http.CallOption) (*common.Reply, error) {
	var out common.Reply
	pattern := "/v1/user/receiving-methods/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationReceivingMethodsUpdateReceivingMethod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
