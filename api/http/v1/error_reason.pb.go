// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: api/http/v1/error_reason.proto

package v1

import (
	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorReason int32

const (
	// 通用错误码
	ErrorReason_ERROR_REASON_UNSPECIFIED ErrorReason = 0 // 未指定的错误
	ErrorReason_INVALID_INPUT            ErrorReason = 1 // 输入无效
	ErrorReason_PERMISSION_DENIED        ErrorReason = 2 // 无权限访问
	ErrorReason_TOO_MANY_REQUESTS        ErrorReason = 3 // 请求过多
	ErrorReason_SESSION_EXPIRED          ErrorReason = 4 // 会话已过期
	ErrorReason_CAPTCHA_REQUIRED         ErrorReason = 5 // 需要验证码
	// 用户相关错误码
	ErrorReason_USER_NOT_FOUND          ErrorReason = 100 // 用户未找到
	ErrorReason_INVALID_PASSWORD        ErrorReason = 101 // 密码无效
	ErrorReason_ACCOUNT_LOCKED          ErrorReason = 102 // 账户被锁定
	ErrorReason_ACCOUNT_DISABLED        ErrorReason = 103 // 账户已禁用
	ErrorReason_TOKEN_EXPIRED           ErrorReason = 104 // 令牌已过期
	ErrorReason_TOKEN_INVALID           ErrorReason = 105 // 令牌无效
	ErrorReason_EMAIL_ALREADY_EXISTS    ErrorReason = 106 // 邮箱已存在
	ErrorReason_USERNAME_ALREADY_EXISTS ErrorReason = 107 // 用户名已存在
	ErrorReason_PASSWORD_TOO_WEAK       ErrorReason = 108 // 密码强度不足
	ErrorReason_EMAIL_NOT_VERIFIED      ErrorReason = 109 // 邮箱未验证
	ErrorReason_ACCOUNT_NOT_ACTIVATED   ErrorReason = 110 // 账户未激活
	ErrorReason_UNSUPPORTED_OPERATION   ErrorReason = 111 // 不支持的操作
	// KYC 相关错误码
	ErrorReason_DOCUMENT_NOT_FOUND           ErrorReason = 200 // 文件未找到
	ErrorReason_INVALID_DOCUMENT_TYPE        ErrorReason = 201 // 无效的文件类型
	ErrorReason_DOCUMENT_EXPIRED             ErrorReason = 202 // 文件已过期
	ErrorReason_DOCUMENT_UPLOAD_FAILED       ErrorReason = 203 // 文件上传失败
	ErrorReason_DOCUMENT_VERIFICATION_FAILED ErrorReason = 204 // 文件验证失败
	ErrorReason_KYC_ALREADY_COMPLETED        ErrorReason = 205 // KYC 已完成
	ErrorReason_KYC_PENDING                  ErrorReason = 206 // KYC 审核中
	ErrorReason_KYC_REJECTED                 ErrorReason = 207 // KYC 被拒绝
	ErrorReason_UNSUPPORTED_DOCUMENT_FORMAT  ErrorReason = 208 // 不支持的文件格式
	ErrorReason_INSUFFICIENT_INFORMATION     ErrorReason = 209 // 信息不足
	ErrorReason_DUPLICATE_DOCUMENT           ErrorReason = 210 // 重复的文件
	ErrorReason_USER_NOT_VERIFIED            ErrorReason = 211 // 用户未验证
	ErrorReason_DOCUMENT_SIZE_TOO_LARGE      ErrorReason = 212 // 文件大小过大
)

// Enum value maps for ErrorReason.
var (
	ErrorReason_name = map[int32]string{
		0:   "ERROR_REASON_UNSPECIFIED",
		1:   "INVALID_INPUT",
		2:   "PERMISSION_DENIED",
		3:   "TOO_MANY_REQUESTS",
		4:   "SESSION_EXPIRED",
		5:   "CAPTCHA_REQUIRED",
		100: "USER_NOT_FOUND",
		101: "INVALID_PASSWORD",
		102: "ACCOUNT_LOCKED",
		103: "ACCOUNT_DISABLED",
		104: "TOKEN_EXPIRED",
		105: "TOKEN_INVALID",
		106: "EMAIL_ALREADY_EXISTS",
		107: "USERNAME_ALREADY_EXISTS",
		108: "PASSWORD_TOO_WEAK",
		109: "EMAIL_NOT_VERIFIED",
		110: "ACCOUNT_NOT_ACTIVATED",
		111: "UNSUPPORTED_OPERATION",
		200: "DOCUMENT_NOT_FOUND",
		201: "INVALID_DOCUMENT_TYPE",
		202: "DOCUMENT_EXPIRED",
		203: "DOCUMENT_UPLOAD_FAILED",
		204: "DOCUMENT_VERIFICATION_FAILED",
		205: "KYC_ALREADY_COMPLETED",
		206: "KYC_PENDING",
		207: "KYC_REJECTED",
		208: "UNSUPPORTED_DOCUMENT_FORMAT",
		209: "INSUFFICIENT_INFORMATION",
		210: "DUPLICATE_DOCUMENT",
		211: "USER_NOT_VERIFIED",
		212: "DOCUMENT_SIZE_TOO_LARGE",
	}
	ErrorReason_value = map[string]int32{
		"ERROR_REASON_UNSPECIFIED":     0,
		"INVALID_INPUT":                1,
		"PERMISSION_DENIED":            2,
		"TOO_MANY_REQUESTS":            3,
		"SESSION_EXPIRED":              4,
		"CAPTCHA_REQUIRED":             5,
		"USER_NOT_FOUND":               100,
		"INVALID_PASSWORD":             101,
		"ACCOUNT_LOCKED":               102,
		"ACCOUNT_DISABLED":             103,
		"TOKEN_EXPIRED":                104,
		"TOKEN_INVALID":                105,
		"EMAIL_ALREADY_EXISTS":         106,
		"USERNAME_ALREADY_EXISTS":      107,
		"PASSWORD_TOO_WEAK":            108,
		"EMAIL_NOT_VERIFIED":           109,
		"ACCOUNT_NOT_ACTIVATED":        110,
		"UNSUPPORTED_OPERATION":        111,
		"DOCUMENT_NOT_FOUND":           200,
		"INVALID_DOCUMENT_TYPE":        201,
		"DOCUMENT_EXPIRED":             202,
		"DOCUMENT_UPLOAD_FAILED":       203,
		"DOCUMENT_VERIFICATION_FAILED": 204,
		"KYC_ALREADY_COMPLETED":        205,
		"KYC_PENDING":                  206,
		"KYC_REJECTED":                 207,
		"UNSUPPORTED_DOCUMENT_FORMAT":  208,
		"INSUFFICIENT_INFORMATION":     209,
		"DUPLICATE_DOCUMENT":           210,
		"USER_NOT_VERIFIED":            211,
		"DOCUMENT_SIZE_TOO_LARGE":      212,
	}
)

func (x ErrorReason) Enum() *ErrorReason {
	p := new(ErrorReason)
	*p = x
	return p
}

func (x ErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_api_http_v1_error_reason_proto_enumTypes[0].Descriptor()
}

func (ErrorReason) Type() protoreflect.EnumType {
	return &file_api_http_v1_error_reason_proto_enumTypes[0]
}

func (x ErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorReason.Descriptor instead.
func (ErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_api_http_v1_error_reason_proto_rawDescGZIP(), []int{0}
}

var File_api_http_v1_error_reason_proto protoreflect.FileDescriptor

var file_api_http_v1_error_reason_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2a, 0xca, 0x07, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x17, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12,
	0x1b, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x1b, 0x0a, 0x11,
	0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x10, 0x03, 0x1a, 0x04, 0xa8, 0x45, 0xad, 0x03, 0x12, 0x19, 0x0a, 0x0f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x04,
	0xa8, 0x45, 0x91, 0x03, 0x12, 0x1a, 0x0a, 0x10, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03,
	0x12, 0x18, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x64, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03, 0x12, 0x1a, 0x0a, 0x10, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x65,
	0x1a, 0x04, 0xa8, 0x45, 0x91, 0x03, 0x12, 0x18, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x66, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03,
	0x12, 0x1a, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x67, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x17, 0x0a, 0x0d,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x68, 0x1a,
	0x04, 0xa8, 0x45, 0x91, 0x03, 0x12, 0x17, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x69, 0x1a, 0x04, 0xa8, 0x45, 0x91, 0x03, 0x12, 0x1e,
	0x0a, 0x14, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x6a, 0x1a, 0x04, 0xa8, 0x45, 0x99, 0x03, 0x12, 0x21,
	0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x6b, 0x1a, 0x04, 0xa8, 0x45, 0x99,
	0x03, 0x12, 0x1b, 0x0a, 0x11, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x57, 0x45, 0x41, 0x4b, 0x10, 0x6c, 0x1a, 0x04, 0xa8, 0x45, 0xa6, 0x03, 0x12, 0x1c,
	0x0a, 0x12, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x6d, 0x1a, 0x04, 0xa8, 0x45, 0x91, 0x03, 0x12, 0x1f, 0x0a, 0x15,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x6e, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x1f, 0x0a,
	0x15, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6f, 0x1a, 0x04, 0xa8, 0x45, 0xa6, 0x03, 0x12, 0x1d,
	0x0a, 0x12, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0xc8, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03, 0x12, 0x20, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xc9, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0xa6, 0x03, 0x12,
	0x1b, 0x0a, 0x10, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0xca, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x21, 0x0a, 0x16,
	0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xcb, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12,
	0x27, 0x0a, 0x1c, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0xcc, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0xa6, 0x03, 0x12, 0x20, 0x0a, 0x15, 0x4b, 0x59, 0x43, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0xcd, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x16, 0x0a, 0x0b, 0x4b, 0x59,
	0x43, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xce, 0x01, 0x1a, 0x04, 0xa8, 0x45,
	0x90, 0x03, 0x12, 0x17, 0x0a, 0x0c, 0x4b, 0x59, 0x43, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0xcf, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x26, 0x0a, 0x1b, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xd0, 0x01, 0x1a, 0x04, 0xa8,
	0x45, 0xa6, 0x03, 0x12, 0x23, 0x0a, 0x18, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xd1, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1d, 0x0a, 0x12, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xd2,
	0x01, 0x1a, 0x04, 0xa8, 0x45, 0x99, 0x03, 0x12, 0x1c, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0xd3, 0x01, 0x1a,
	0x04, 0xa8, 0x45, 0x91, 0x03, 0x12, 0x22, 0x0a, 0x17, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45,
	0x10, 0xd4, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x9d, 0x03, 0x1a, 0x04, 0xa0, 0x45, 0xf4, 0x03, 0x42,
	0x3f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x50, 0x01,
	0x5a, 0x22, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x31, 0xa2, 0x02, 0x09, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_http_v1_error_reason_proto_rawDescOnce sync.Once
	file_api_http_v1_error_reason_proto_rawDescData = file_api_http_v1_error_reason_proto_rawDesc
)

func file_api_http_v1_error_reason_proto_rawDescGZIP() []byte {
	file_api_http_v1_error_reason_proto_rawDescOnce.Do(func() {
		file_api_http_v1_error_reason_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_http_v1_error_reason_proto_rawDescData)
	})
	return file_api_http_v1_error_reason_proto_rawDescData
}

var file_api_http_v1_error_reason_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_http_v1_error_reason_proto_goTypes = []any{
	(ErrorReason)(0), // 0: api.http.v1.ErrorReason
}
var file_api_http_v1_error_reason_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_http_v1_error_reason_proto_init() }
func file_api_http_v1_error_reason_proto_init() {
	if File_api_http_v1_error_reason_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_http_v1_error_reason_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_http_v1_error_reason_proto_goTypes,
		DependencyIndexes: file_api_http_v1_error_reason_proto_depIdxs,
		EnumInfos:         file_api_http_v1_error_reason_proto_enumTypes,
	}.Build()
	File_api_http_v1_error_reason_proto = out.File
	file_api_http_v1_error_reason_proto_rawDesc = nil
	file_api_http_v1_error_reason_proto_goTypes = nil
	file_api_http_v1_error_reason_proto_depIdxs = nil
}
