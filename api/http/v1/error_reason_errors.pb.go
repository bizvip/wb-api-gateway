// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 通用错误码
func IsErrorReasonUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_UNSPECIFIED.String() && e.Code == 400
}

// 通用错误码
func ErrorErrorReasonUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERROR_REASON_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

// 输入无效
func IsInvalidInput(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_INPUT.String() && e.Code == 400
}

// 输入无效
func ErrorInvalidInput(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_INPUT.String(), fmt.Sprintf(format, args...))
}

// 无权限访问
func IsPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PERMISSION_DENIED.String() && e.Code == 403
}

// 无权限访问
func ErrorPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

// 请求过多
func IsTooManyRequests(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOO_MANY_REQUESTS.String() && e.Code == 429
}

// 请求过多
func ErrorTooManyRequests(format string, args ...interface{}) *errors.Error {
	return errors.New(429, ErrorReason_TOO_MANY_REQUESTS.String(), fmt.Sprintf(format, args...))
}

// 会话已过期
func IsSessionExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SESSION_EXPIRED.String() && e.Code == 401
}

// 会话已过期
func ErrorSessionExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_SESSION_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// 需要验证码
func IsCaptchaRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CAPTCHA_REQUIRED.String() && e.Code == 400
}

// 需要验证码
func ErrorCaptchaRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CAPTCHA_REQUIRED.String(), fmt.Sprintf(format, args...))
}

// 用户相关错误码
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 用户相关错误码
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 密码无效
func IsInvalidPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_PASSWORD.String() && e.Code == 401
}

// 密码无效
func ErrorInvalidPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_INVALID_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// 账户被锁定
func IsAccountLocked(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCOUNT_LOCKED.String() && e.Code == 403
}

// 账户被锁定
func ErrorAccountLocked(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_ACCOUNT_LOCKED.String(), fmt.Sprintf(format, args...))
}

// 账户已禁用
func IsAccountDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCOUNT_DISABLED.String() && e.Code == 403
}

// 账户已禁用
func ErrorAccountDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_ACCOUNT_DISABLED.String(), fmt.Sprintf(format, args...))
}

// 令牌已过期
func IsTokenExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOKEN_EXPIRED.String() && e.Code == 401
}

// 令牌已过期
func ErrorTokenExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_TOKEN_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// 令牌无效
func IsTokenInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOKEN_INVALID.String() && e.Code == 401
}

// 令牌无效
func ErrorTokenInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_TOKEN_INVALID.String(), fmt.Sprintf(format, args...))
}

// 邮箱已存在
func IsEmailAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_ALREADY_EXISTS.String() && e.Code == 409
}

// 邮箱已存在
func ErrorEmailAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_EMAIL_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 用户名已存在
func IsUsernameAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USERNAME_ALREADY_EXISTS.String() && e.Code == 409
}

// 用户名已存在
func ErrorUsernameAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_USERNAME_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 密码强度不足
func IsPasswordTooWeak(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_TOO_WEAK.String() && e.Code == 422
}

// 密码强度不足
func ErrorPasswordTooWeak(format string, args ...interface{}) *errors.Error {
	return errors.New(422, ErrorReason_PASSWORD_TOO_WEAK.String(), fmt.Sprintf(format, args...))
}

// 邮箱未验证
func IsEmailNotVerified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_NOT_VERIFIED.String() && e.Code == 401
}

// 邮箱未验证
func ErrorEmailNotVerified(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_EMAIL_NOT_VERIFIED.String(), fmt.Sprintf(format, args...))
}

// 账户未激活
func IsAccountNotActivated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCOUNT_NOT_ACTIVATED.String() && e.Code == 403
}

// 账户未激活
func ErrorAccountNotActivated(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_ACCOUNT_NOT_ACTIVATED.String(), fmt.Sprintf(format, args...))
}

// 不支持的操作
func IsUnsupportedOperation(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSUPPORTED_OPERATION.String() && e.Code == 422
}

// 不支持的操作
func ErrorUnsupportedOperation(format string, args ...interface{}) *errors.Error {
	return errors.New(422, ErrorReason_UNSUPPORTED_OPERATION.String(), fmt.Sprintf(format, args...))
}

// KYC 相关错误码
func IsDocumentNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOCUMENT_NOT_FOUND.String() && e.Code == 404
}

// KYC 相关错误码
func ErrorDocumentNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_DOCUMENT_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 无效的文件类型
func IsInvalidDocumentType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_DOCUMENT_TYPE.String() && e.Code == 422
}

// 无效的文件类型
func ErrorInvalidDocumentType(format string, args ...interface{}) *errors.Error {
	return errors.New(422, ErrorReason_INVALID_DOCUMENT_TYPE.String(), fmt.Sprintf(format, args...))
}

// 文件已过期
func IsDocumentExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOCUMENT_EXPIRED.String() && e.Code == 400
}

// 文件已过期
func ErrorDocumentExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DOCUMENT_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// 文件上传失败
func IsDocumentUploadFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOCUMENT_UPLOAD_FAILED.String() && e.Code == 500
}

// 文件上传失败
func ErrorDocumentUploadFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DOCUMENT_UPLOAD_FAILED.String(), fmt.Sprintf(format, args...))
}

// 文件验证失败
func IsDocumentVerificationFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOCUMENT_VERIFICATION_FAILED.String() && e.Code == 422
}

// 文件验证失败
func ErrorDocumentVerificationFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(422, ErrorReason_DOCUMENT_VERIFICATION_FAILED.String(), fmt.Sprintf(format, args...))
}

// KYC 已完成
func IsKycAlreadyCompleted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_KYC_ALREADY_COMPLETED.String() && e.Code == 400
}

// KYC 已完成
func ErrorKycAlreadyCompleted(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_KYC_ALREADY_COMPLETED.String(), fmt.Sprintf(format, args...))
}

// KYC 审核中
func IsKycPending(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_KYC_PENDING.String() && e.Code == 400
}

// KYC 审核中
func ErrorKycPending(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_KYC_PENDING.String(), fmt.Sprintf(format, args...))
}

// KYC 被拒绝
func IsKycRejected(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_KYC_REJECTED.String() && e.Code == 400
}

// KYC 被拒绝
func ErrorKycRejected(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_KYC_REJECTED.String(), fmt.Sprintf(format, args...))
}

// 不支持的文件格式
func IsUnsupportedDocumentFormat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSUPPORTED_DOCUMENT_FORMAT.String() && e.Code == 422
}

// 不支持的文件格式
func ErrorUnsupportedDocumentFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(422, ErrorReason_UNSUPPORTED_DOCUMENT_FORMAT.String(), fmt.Sprintf(format, args...))
}

// 信息不足
func IsInsufficientInformation(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INSUFFICIENT_INFORMATION.String() && e.Code == 400
}

// 信息不足
func ErrorInsufficientInformation(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INSUFFICIENT_INFORMATION.String(), fmt.Sprintf(format, args...))
}

// 重复的文件
func IsDuplicateDocument(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DUPLICATE_DOCUMENT.String() && e.Code == 409
}

// 重复的文件
func ErrorDuplicateDocument(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_DUPLICATE_DOCUMENT.String(), fmt.Sprintf(format, args...))
}

// 用户未验证
func IsUserNotVerified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_VERIFIED.String() && e.Code == 401
}

// 用户未验证
func ErrorUserNotVerified(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_USER_NOT_VERIFIED.String(), fmt.Sprintf(format, args...))
}

// 文件大小过大
func IsDocumentSizeTooLarge(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOCUMENT_SIZE_TOO_LARGE.String() && e.Code == 413
}

// 文件大小过大
func ErrorDocumentSizeTooLarge(format string, args ...interface{}) *errors.Error {
	return errors.New(413, ErrorReason_DOCUMENT_SIZE_TOO_LARGE.String(), fmt.Sprintf(format, args...))
}
