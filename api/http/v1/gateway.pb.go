// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: http/v1/gateway.proto

package v1

import (
	common "api_gateway_service/api/common"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ListAddressReq) Reset() {
	*x = ListAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_v1_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressReq) ProtoMessage() {}

func (x *ListAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_http_v1_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressReq.ProtoReflect.Descriptor instead.
func (*ListAddressReq) Descriptor() ([]byte, []int) {
	return file_http_v1_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *ListAddressReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type AddAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CoinName string `protobuf:"bytes,2,opt,name=coinName,proto3" json:"coinName,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Remark   string `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *AddAddressReq) Reset() {
	*x = AddAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_v1_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAddressReq) ProtoMessage() {}

func (x *AddAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_http_v1_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAddressReq.ProtoReflect.Descriptor instead.
func (*AddAddressReq) Descriptor() ([]byte, []int) {
	return file_http_v1_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *AddAddressReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddAddressReq) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *AddAddressReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddAddressReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type DelAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Id  uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelAddressReq) Reset() {
	*x = DelAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_v1_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAddressReq) ProtoMessage() {}

func (x *DelAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_http_v1_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAddressReq.ProtoReflect.Descriptor instead.
func (*DelAddressReq) Descriptor() ([]byte, []int) {
	return file_http_v1_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *DelAddressReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DelAddressReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CoinName string `protobuf:"bytes,2,opt,name=coinName,proto3" json:"coinName,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Remark   string `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *UpdateAddressReq) Reset() {
	*x = UpdateAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_v1_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressReq) ProtoMessage() {}

func (x *UpdateAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_http_v1_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressReq.ProtoReflect.Descriptor instead.
func (*UpdateAddressReq) Descriptor() ([]byte, []int) {
	return file_http_v1_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateAddressReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UpdateAddressReq) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *UpdateAddressReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateAddressReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type ListPaymentMethodsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ListPaymentMethodsReq) Reset() {
	*x = ListPaymentMethodsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_v1_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPaymentMethodsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPaymentMethodsReq) ProtoMessage() {}

func (x *ListPaymentMethodsReq) ProtoReflect() protoreflect.Message {
	mi := &file_http_v1_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPaymentMethodsReq.ProtoReflect.Descriptor instead.
func (*ListPaymentMethodsReq) Descriptor() ([]byte, []int) {
	return file_http_v1_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *ListPaymentMethodsReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type DelPaymentMethodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Id  uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelPaymentMethodReq) Reset() {
	*x = DelPaymentMethodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_v1_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPaymentMethodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPaymentMethodReq) ProtoMessage() {}

func (x *DelPaymentMethodReq) ProtoReflect() protoreflect.Message {
	mi := &file_http_v1_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPaymentMethodReq.ProtoReflect.Descriptor instead.
func (*DelPaymentMethodReq) Descriptor() ([]byte, []int) {
	return file_http_v1_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *DelPaymentMethodReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DelPaymentMethodReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AddPaymentMethodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Method     string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	RealName   string `protobuf:"bytes,3,opt,name=realName,proto3" json:"realName,omitempty"`
	CardNo     string `protobuf:"bytes,4,opt,name=cardNo,proto3" json:"cardNo,omitempty"`
	OpenBank   string `protobuf:"bytes,5,opt,name=openBank,proto3" json:"openBank,omitempty"`
	BankBranch string `protobuf:"bytes,6,opt,name=bankBranch,proto3" json:"bankBranch,omitempty"`
	Nickname   string `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty"`
	QrcodeUrl  string `protobuf:"bytes,8,opt,name=qrcodeUrl,proto3" json:"qrcodeUrl,omitempty"`
	ECnyNo     string `protobuf:"bytes,9,opt,name=eCnyNo,proto3" json:"eCnyNo,omitempty"`
}

func (x *AddPaymentMethodReq) Reset() {
	*x = AddPaymentMethodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_v1_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPaymentMethodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPaymentMethodReq) ProtoMessage() {}

func (x *AddPaymentMethodReq) ProtoReflect() protoreflect.Message {
	mi := &file_http_v1_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPaymentMethodReq.ProtoReflect.Descriptor instead.
func (*AddPaymentMethodReq) Descriptor() ([]byte, []int) {
	return file_http_v1_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *AddPaymentMethodReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddPaymentMethodReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *AddPaymentMethodReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *AddPaymentMethodReq) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *AddPaymentMethodReq) GetOpenBank() string {
	if x != nil {
		return x.OpenBank
	}
	return ""
}

func (x *AddPaymentMethodReq) GetBankBranch() string {
	if x != nil {
		return x.BankBranch
	}
	return ""
}

func (x *AddPaymentMethodReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *AddPaymentMethodReq) GetQrcodeUrl() string {
	if x != nil {
		return x.QrcodeUrl
	}
	return ""
}

func (x *AddPaymentMethodReq) GetECnyNo() string {
	if x != nil {
		return x.ECnyNo
	}
	return ""
}

type UpdatePaymentMethodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Method     string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	RealName   string `protobuf:"bytes,3,opt,name=realName,proto3" json:"realName,omitempty"`
	CardNo     string `protobuf:"bytes,4,opt,name=cardNo,proto3" json:"cardNo,omitempty"`
	OpenBank   string `protobuf:"bytes,5,opt,name=openBank,proto3" json:"openBank,omitempty"`
	BankBranch string `protobuf:"bytes,6,opt,name=bankBranch,proto3" json:"bankBranch,omitempty"`
	Nickname   string `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty"`
	QrcodeUrl  string `protobuf:"bytes,8,opt,name=qrcodeUrl,proto3" json:"qrcodeUrl,omitempty"`
	ECnyNo     string `protobuf:"bytes,9,opt,name=eCnyNo,proto3" json:"eCnyNo,omitempty"`
}

func (x *UpdatePaymentMethodReq) Reset() {
	*x = UpdatePaymentMethodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_v1_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePaymentMethodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePaymentMethodReq) ProtoMessage() {}

func (x *UpdatePaymentMethodReq) ProtoReflect() protoreflect.Message {
	mi := &file_http_v1_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePaymentMethodReq.ProtoReflect.Descriptor instead.
func (*UpdatePaymentMethodReq) Descriptor() ([]byte, []int) {
	return file_http_v1_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePaymentMethodReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UpdatePaymentMethodReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *UpdatePaymentMethodReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UpdatePaymentMethodReq) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *UpdatePaymentMethodReq) GetOpenBank() string {
	if x != nil {
		return x.OpenBank
	}
	return ""
}

func (x *UpdatePaymentMethodReq) GetBankBranch() string {
	if x != nil {
		return x.BankBranch
	}
	return ""
}

func (x *UpdatePaymentMethodReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UpdatePaymentMethodReq) GetQrcodeUrl() string {
	if x != nil {
		return x.QrcodeUrl
	}
	return ""
}

func (x *UpdatePaymentMethodReq) GetECnyNo() string {
	if x != nil {
		return x.ECnyNo
	}
	return ""
}

type RegisterAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户名，长度必须在 6 到 32 个字符之间，不允许包含空格
	Usr string `protobuf:"bytes,1,opt,name=usr,proto3" json:"usr,omitempty"`
	// 密码，长度必须在 60 到 100 个字符之间，不允许包含空格
	Pwd string `protobuf:"bytes,2,opt,name=pwd,proto3" json:"pwd,omitempty"`
	// 语言代码，必须为两个小写字母的 ISO 639-1 语言代码
	Lang string `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	// 设备 ID，必须仅包含大小写字母、数字和下划线
	DeviceId string `protobuf:"bytes,4,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	// 时区，必须为合法的时区格式，例如 "Asia/Shanghai"
	TimeZone string `protobuf:"bytes,5,opt,name=timeZone,proto3" json:"timeZone,omitempty"`
	// 货币代码，必须为指定的合法货币代码，且必须为大写
	Currency string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *RegisterAccountReq) Reset() {
	*x = RegisterAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_v1_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAccountReq) ProtoMessage() {}

func (x *RegisterAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_http_v1_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAccountReq.ProtoReflect.Descriptor instead.
func (*RegisterAccountReq) Descriptor() ([]byte, []int) {
	return file_http_v1_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterAccountReq) GetUsr() string {
	if x != nil {
		return x.Usr
	}
	return ""
}

func (x *RegisterAccountReq) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *RegisterAccountReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *RegisterAccountReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RegisterAccountReq) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *RegisterAccountReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type GetAccountInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户 ID，必须为大于 0 的正整数
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GetAccountInfoReq) Reset() {
	*x = GetAccountInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_v1_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountInfoReq) ProtoMessage() {}

func (x *GetAccountInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_http_v1_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountInfoReq.ProtoReflect.Descriptor instead.
func (*GetAccountInfoReq) Descriptor() ([]byte, []int) {
	return file_http_v1_gateway_proto_rawDescGZIP(), []int{9}
}

func (x *GetAccountInfoReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type UpdateAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户 ID，必须为大于 0 的正整数
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 语言代码，必须为两个小写字母的 ISO 639-1 语言代码
	Lang string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	// 货币代码，必须为指定的合法货币代码，服务端将强制统一转换为大写
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	// 安全密码，长度必须在 60 到 100 个字符之间，不允许包含空格
	SecPwd string `protobuf:"bytes,4,opt,name=secPwd,proto3" json:"secPwd,omitempty"`
}

func (x *UpdateAccountReq) Reset() {
	*x = UpdateAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_v1_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountReq) ProtoMessage() {}

func (x *UpdateAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_http_v1_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountReq.ProtoReflect.Descriptor instead.
func (*UpdateAccountReq) Descriptor() ([]byte, []int) {
	return file_http_v1_gateway_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateAccountReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UpdateAccountReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *UpdateAccountReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UpdateAccountReq) GetSecPwd() string {
	if x != nil {
		return x.SecPwd
	}
	return ""
}

var File_http_v1_gateway_proto protoreflect.FileDescriptor

var file_http_v1_gateway_proto_rawDesc = []byte{
	0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x2b, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xba, 0x01,
	0x0a, 0x0d, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x42,
	0x15, 0x72, 0x13, 0x10, 0x01, 0x32, 0x0c, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d,
	0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01, 0x32, 0x0e, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0xd0,
	0x01, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x43, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20,
	0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xbd, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x10, 0x01, 0x32, 0x0c, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01, 0x32,
	0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0xd0,
	0x01, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x00, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0x32, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0xeb,
	0x03, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x06, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x06, 0x61, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x52, 0x05, 0x65, 0x5f, 0x63, 0x6e, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x10, 0x01, 0x32, 0x0b, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x01, 0x32,
	0x08, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x61, 0x6e, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01, 0x32,
	0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0xd0,
	0x01, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x0a,
	0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01, 0x32, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x0a, 0x62, 0x61,
	0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72,
	0x15, 0x10, 0x01, 0x32, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x09, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x32, 0x17, 0x5e, 0x28, 0x68, 0x74,
	0x74, 0x70, 0x7c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x29, 0x3a, 0x2f, 0x2f, 0x5b, 0x5e, 0x5c, 0x73,
	0x5d, 0x2b, 0x24, 0x52, 0x09, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2c,
	0x0a, 0x06, 0x65, 0x43, 0x6e, 0x79, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x01, 0x32, 0x08, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b,
	0x24, 0xd0, 0x01, 0x00, 0x52, 0x06, 0x65, 0x43, 0x6e, 0x79, 0x4e, 0x6f, 0x22, 0xee, 0x03, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x63,
	0x61, 0x72, 0x64, 0x52, 0x06, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x06, 0x61, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x52, 0x05, 0x65, 0x5f, 0x63, 0x6e, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x10, 0x01, 0x32, 0x0b, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x01,
	0x32, 0x08, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x61, 0x6e,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01,
	0x32, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24,
	0xd0, 0x01, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x3a, 0x0a,
	0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01, 0x32, 0x0e, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x0a, 0x62,
	0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17,
	0x72, 0x15, 0x10, 0x01, 0x32, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x09, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x32, 0x17, 0x5e, 0x28, 0x68,
	0x74, 0x74, 0x70, 0x7c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x29, 0x3a, 0x2f, 0x2f, 0x5b, 0x5e, 0x5c,
	0x73, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x06, 0x65, 0x43, 0x6e, 0x79, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x10, 0x01, 0x32, 0x08, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x06, 0x65, 0x43, 0x6e, 0x79, 0x4e, 0x6f, 0x22, 0x89, 0x03,
	0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x03, 0x75, 0x73, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xfa, 0x42, 0x13, 0x72, 0x11, 0x10, 0x06, 0x18, 0x20, 0x32, 0x08, 0x5e, 0x5b,
	0x5e, 0x5c, 0x73, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x03, 0x75, 0x73, 0x72, 0x12, 0x28,
	0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x13,
	0x72, 0x11, 0x10, 0x3c, 0x18, 0x64, 0x32, 0x08, 0x5e, 0x5b, 0x5e, 0x5c, 0x73, 0x5d, 0x2b, 0x24,
	0xd0, 0x01, 0x00, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32, 0x0a, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x32, 0x7d, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x32, 0x0f, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xfa, 0x42, 0x1e,
	0x72, 0x1c, 0x32, 0x17, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5f, 0x5d, 0x2b, 0x2f,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5f, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x7f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0xfa, 0x42, 0x60, 0x72,
	0x5e, 0x52, 0x03, 0x43, 0x4e, 0x59, 0x52, 0x03, 0x55, 0x53, 0x44, 0x52, 0x03, 0x45, 0x55, 0x52,
	0x52, 0x03, 0x4a, 0x50, 0x59, 0x52, 0x03, 0x47, 0x42, 0x50, 0x52, 0x03, 0x41, 0x55, 0x44, 0x52,
	0x03, 0x43, 0x41, 0x44, 0x52, 0x03, 0x43, 0x48, 0x46, 0x52, 0x03, 0x48, 0x4b, 0x44, 0x52, 0x03,
	0x4e, 0x5a, 0x44, 0x52, 0x03, 0x4b, 0x52, 0x57, 0x52, 0x03, 0x49, 0x44, 0x52, 0x52, 0x03, 0x56,
	0x4e, 0x44, 0x52, 0x03, 0x54, 0x57, 0x44, 0x52, 0x03, 0x53, 0x47, 0x44, 0x52, 0x03, 0x42, 0x52,
	0x4c, 0x52, 0x03, 0x4d, 0x4f, 0x50, 0x52, 0x04, 0x55, 0x53, 0x44, 0x54, 0xd0, 0x01, 0x00, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x2e, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x20, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x20, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32, 0x0a,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x32, 0x7d, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x7f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0xfa, 0x42, 0x60, 0x72, 0x5e, 0x52, 0x03, 0x43, 0x4e,
	0x59, 0x52, 0x03, 0x55, 0x53, 0x44, 0x52, 0x03, 0x45, 0x55, 0x52, 0x52, 0x03, 0x4a, 0x50, 0x59,
	0x52, 0x03, 0x47, 0x42, 0x50, 0x52, 0x03, 0x41, 0x55, 0x44, 0x52, 0x03, 0x43, 0x41, 0x44, 0x52,
	0x03, 0x43, 0x48, 0x46, 0x52, 0x03, 0x48, 0x4b, 0x44, 0x52, 0x03, 0x4e, 0x5a, 0x44, 0x52, 0x03,
	0x4b, 0x52, 0x57, 0x52, 0x03, 0x49, 0x44, 0x52, 0x52, 0x03, 0x56, 0x4e, 0x44, 0x52, 0x03, 0x54,
	0x57, 0x44, 0x52, 0x03, 0x53, 0x47, 0x44, 0x52, 0x03, 0x42, 0x52, 0x4c, 0x52, 0x03, 0x4d, 0x4f,
	0x50, 0x52, 0x04, 0x55, 0x53, 0x44, 0x54, 0xd0, 0x01, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x50, 0x77, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x13, 0x72, 0x11, 0x10, 0x3c, 0x18, 0x64, 0x32,
	0x08, 0x5e, 0x5b, 0x5e, 0x5c, 0x73, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x50, 0x77, 0x64, 0x32, 0x84, 0x09, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x69, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a,
	0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x7f, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x3c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x5a, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f,
	0x7b, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x0a, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x12, 0x63, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5d,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x68, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x64, 0x12,
	0x6f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x69, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a,
	0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x3f, 0x0a, 0x0b, 0x61,
	0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x22, 0x61, 0x70,
	0x69, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0xa2, 0x02, 0x09, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_http_v1_gateway_proto_rawDescOnce sync.Once
	file_http_v1_gateway_proto_rawDescData = file_http_v1_gateway_proto_rawDesc
)

func file_http_v1_gateway_proto_rawDescGZIP() []byte {
	file_http_v1_gateway_proto_rawDescOnce.Do(func() {
		file_http_v1_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_http_v1_gateway_proto_rawDescData)
	})
	return file_http_v1_gateway_proto_rawDescData
}

var file_http_v1_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_http_v1_gateway_proto_goTypes = []any{
	(*ListAddressReq)(nil),         // 0: api.http.v1.ListAddressReq
	(*AddAddressReq)(nil),          // 1: api.http.v1.AddAddressReq
	(*DelAddressReq)(nil),          // 2: api.http.v1.DelAddressReq
	(*UpdateAddressReq)(nil),       // 3: api.http.v1.UpdateAddressReq
	(*ListPaymentMethodsReq)(nil),  // 4: api.http.v1.ListPaymentMethodsReq
	(*DelPaymentMethodReq)(nil),    // 5: api.http.v1.DelPaymentMethodReq
	(*AddPaymentMethodReq)(nil),    // 6: api.http.v1.AddPaymentMethodReq
	(*UpdatePaymentMethodReq)(nil), // 7: api.http.v1.UpdatePaymentMethodReq
	(*RegisterAccountReq)(nil),     // 8: api.http.v1.RegisterAccountReq
	(*GetAccountInfoReq)(nil),      // 9: api.http.v1.GetAccountInfoReq
	(*UpdateAccountReq)(nil),       // 10: api.http.v1.UpdateAccountReq
	(*common.Res)(nil),             // 11: api.common.Res
}
var file_http_v1_gateway_proto_depIdxs = []int32{
	8,  // 0: api.http.v1.Gateway.RegisterAccount:input_type -> api.http.v1.RegisterAccountReq
	9,  // 1: api.http.v1.Gateway.GetAccountInfo:input_type -> api.http.v1.GetAccountInfoReq
	10, // 2: api.http.v1.Gateway.UpdateAccount:input_type -> api.http.v1.UpdateAccountReq
	0,  // 3: api.http.v1.Gateway.ListAddress:input_type -> api.http.v1.ListAddressReq
	1,  // 4: api.http.v1.Gateway.AddAddress:input_type -> api.http.v1.AddAddressReq
	3,  // 5: api.http.v1.Gateway.UpdateAddress:input_type -> api.http.v1.UpdateAddressReq
	2,  // 6: api.http.v1.Gateway.DelAddress:input_type -> api.http.v1.DelAddressReq
	4,  // 7: api.http.v1.Gateway.ListPaymentMethods:input_type -> api.http.v1.ListPaymentMethodsReq
	6,  // 8: api.http.v1.Gateway.AddPaymentMethod:input_type -> api.http.v1.AddPaymentMethodReq
	7,  // 9: api.http.v1.Gateway.UpdatePaymentMethod:input_type -> api.http.v1.UpdatePaymentMethodReq
	5,  // 10: api.http.v1.Gateway.DelPaymentMethod:input_type -> api.http.v1.DelPaymentMethodReq
	11, // 11: api.http.v1.Gateway.RegisterAccount:output_type -> api.common.Res
	11, // 12: api.http.v1.Gateway.GetAccountInfo:output_type -> api.common.Res
	11, // 13: api.http.v1.Gateway.UpdateAccount:output_type -> api.common.Res
	11, // 14: api.http.v1.Gateway.ListAddress:output_type -> api.common.Res
	11, // 15: api.http.v1.Gateway.AddAddress:output_type -> api.common.Res
	11, // 16: api.http.v1.Gateway.UpdateAddress:output_type -> api.common.Res
	11, // 17: api.http.v1.Gateway.DelAddress:output_type -> api.common.Res
	11, // 18: api.http.v1.Gateway.ListPaymentMethods:output_type -> api.common.Res
	11, // 19: api.http.v1.Gateway.AddPaymentMethod:output_type -> api.common.Res
	11, // 20: api.http.v1.Gateway.UpdatePaymentMethod:output_type -> api.common.Res
	11, // 21: api.http.v1.Gateway.DelPaymentMethod:output_type -> api.common.Res
	11, // [11:22] is the sub-list for method output_type
	0,  // [0:11] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_http_v1_gateway_proto_init() }
func file_http_v1_gateway_proto_init() {
	if File_http_v1_gateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_http_v1_gateway_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_v1_gateway_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AddAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_v1_gateway_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DelAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_v1_gateway_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_v1_gateway_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListPaymentMethodsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_v1_gateway_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DelPaymentMethodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_v1_gateway_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AddPaymentMethodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_v1_gateway_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePaymentMethodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_v1_gateway_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_v1_gateway_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetAccountInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_v1_gateway_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_http_v1_gateway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_http_v1_gateway_proto_goTypes,
		DependencyIndexes: file_http_v1_gateway_proto_depIdxs,
		MessageInfos:      file_http_v1_gateway_proto_msgTypes,
	}.Build()
	File_http_v1_gateway_proto = out.File
	file_http_v1_gateway_proto_rawDesc = nil
	file_http_v1_gateway_proto_goTypes = nil
	file_http_v1_gateway_proto_depIdxs = nil
}
