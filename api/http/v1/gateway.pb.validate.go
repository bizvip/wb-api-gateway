// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/http/v1/gateway.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Reply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reply with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ReplyMultiError, or nil if none found.
func (m *Reply) ValidateAll() error {
	return m.validate(true)
}

func (m *Reply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReplyMultiError(errors)
	}

	return nil
}

// ReplyMultiError is an error wrapping multiple validation errors returned by
// Reply.ValidateAll() if the designated constraints aren't met.
type ReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyMultiError) AllErrors() []error { return m }

// ReplyValidationError is the validation error returned by Reply.Validate if
// the designated constraints aren't met.
type ReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyValidationError) ErrorName() string { return "ReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyValidationError{}

// Validate checks the field values on UserAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserAccountMultiError, or
// nil if none found.
func (m *UserAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Usr

	// no validation rules for Pwd

	// no validation rules for SecPwd

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for Lang

	// no validation rules for Timezone

	// no validation rules for RealName

	// no validation rules for IdNo

	// no validation rules for Currency

	// no validation rules for IsGoogleAuth

	// no validation rules for GoogleAuth

	// no validation rules for DeviceId

	// no validation rules for IsAllowedMsg

	// no validation rules for IsAllowedEmail

	// no validation rules for MsgType

	// no validation rules for IsRealAuth

	// no validation rules for IsAddedBankcard

	// no validation rules for SecurityLevel

	// no validation rules for IsUnreadNotice

	// no validation rules for IsCoupon

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return UserAccountMultiError(errors)
	}

	return nil
}

// UserAccountMultiError is an error wrapping multiple validation errors
// returned by UserAccount.ValidateAll() if the designated constraints aren't met.
type UserAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAccountMultiError) AllErrors() []error { return m }

// UserAccountValidationError is the validation error returned by
// UserAccount.Validate if the designated constraints aren't met.
type UserAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAccountValidationError) ErrorName() string { return "UserAccountValidationError" }

// Error satisfies the builtin error interface
func (e UserAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAccountValidationError{}

// Validate checks the field values on GetAddressRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressRequestMultiError, or nil if none found.
func (m *GetAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetAddressRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAddressRequestMultiError(errors)
	}

	return nil
}

// GetAddressRequestMultiError is an error wrapping multiple validation errors
// returned by GetAddressRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressRequestMultiError) AllErrors() []error { return m }

// GetAddressRequestValidationError is the validation error returned by
// GetAddressRequest.Validate if the designated constraints aren't met.
type GetAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressRequestValidationError) ErrorName() string {
	return "GetAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressRequestValidationError{}

// Validate checks the field values on AddAddressRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAddressRequestMultiError, or nil if none found.
func (m *AddAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCoinName()) < 2 {
		err := AddAddressRequestValidationError{
			field:  "CoinName",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddAddressRequest_CoinName_Pattern.MatchString(m.GetCoinName()) {
		err := AddAddressRequestValidationError{
			field:  "CoinName",
			reason: "value does not match regex pattern \"^[A-Z0-9-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 20 {
		err := AddAddressRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddAddressRequest_Address_Pattern.MatchString(m.GetAddress()) {
		err := AddAddressRequestValidationError{
			field:  "Address",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRemark() != "" {

		if utf8.RuneCountInString(m.GetRemark()) < 0 {
			err := AddAddressRequestValidationError{
				field:  "Remark",
				reason: "value length must be at least 0 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AddAddressRequestMultiError(errors)
	}

	return nil
}

// AddAddressRequestMultiError is an error wrapping multiple validation errors
// returned by AddAddressRequest.ValidateAll() if the designated constraints
// aren't met.
type AddAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAddressRequestMultiError) AllErrors() []error { return m }

// AddAddressRequestValidationError is the validation error returned by
// AddAddressRequest.Validate if the designated constraints aren't met.
type AddAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAddressRequestValidationError) ErrorName() string {
	return "AddAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAddressRequestValidationError{}

var _AddAddressRequest_CoinName_Pattern = regexp.MustCompile("^[A-Z0-9-]+$")

var _AddAddressRequest_Address_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

// Validate checks the field values on DeleteAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAddressRequestMultiError, or nil if none found.
func (m *DeleteAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAddressRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAddressRequestMultiError(errors)
	}

	return nil
}

// DeleteAddressRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAddressRequestMultiError) AllErrors() []error { return m }

// DeleteAddressRequestValidationError is the validation error returned by
// DeleteAddressRequest.Validate if the designated constraints aren't met.
type DeleteAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAddressRequestValidationError) ErrorName() string {
	return "DeleteAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAddressRequestValidationError{}

// Validate checks the field values on UpdateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAddressRequestMultiError, or nil if none found.
func (m *UpdateAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAddressRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCoinName()) < 2 {
		err := UpdateAddressRequestValidationError{
			field:  "CoinName",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateAddressRequest_CoinName_Pattern.MatchString(m.GetCoinName()) {
		err := UpdateAddressRequestValidationError{
			field:  "CoinName",
			reason: "value does not match regex pattern \"^[A-Z0-9-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 20 {
		err := UpdateAddressRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateAddressRequest_Address_Pattern.MatchString(m.GetAddress()) {
		err := UpdateAddressRequestValidationError{
			field:  "Address",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRemark() != "" {

		if utf8.RuneCountInString(m.GetRemark()) < 0 {
			err := UpdateAddressRequestValidationError{
				field:  "Remark",
				reason: "value length must be at least 0 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateAddressRequestMultiError(errors)
	}

	return nil
}

// UpdateAddressRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAddressRequestMultiError) AllErrors() []error { return m }

// UpdateAddressRequestValidationError is the validation error returned by
// UpdateAddressRequest.Validate if the designated constraints aren't met.
type UpdateAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAddressRequestValidationError) ErrorName() string {
	return "UpdateAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAddressRequestValidationError{}

var _UpdateAddressRequest_CoinName_Pattern = regexp.MustCompile("^[A-Z0-9-]+$")

var _UpdateAddressRequest_Address_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

// Validate checks the field values on GetReceivingMethodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceivingMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivingMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceivingMethodRequestMultiError, or nil if none found.
func (m *GetReceivingMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivingMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetReceivingMethodRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReceivingMethodRequestMultiError(errors)
	}

	return nil
}

// GetReceivingMethodRequestMultiError is an error wrapping multiple validation
// errors returned by GetReceivingMethodRequest.ValidateAll() if the
// designated constraints aren't met.
type GetReceivingMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivingMethodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivingMethodRequestMultiError) AllErrors() []error { return m }

// GetReceivingMethodRequestValidationError is the validation error returned by
// GetReceivingMethodRequest.Validate if the designated constraints aren't met.
type GetReceivingMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivingMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivingMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivingMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivingMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivingMethodRequestValidationError) ErrorName() string {
	return "GetReceivingMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivingMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivingMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivingMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivingMethodRequestValidationError{}

// Validate checks the field values on DeleteReceivingMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReceivingMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReceivingMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReceivingMethodRequestMultiError, or nil if none found.
func (m *DeleteReceivingMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReceivingMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := DeleteReceivingMethodRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetId() <= 0 {
		err := DeleteReceivingMethodRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteReceivingMethodRequestMultiError(errors)
	}

	return nil
}

// DeleteReceivingMethodRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteReceivingMethodRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteReceivingMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReceivingMethodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReceivingMethodRequestMultiError) AllErrors() []error { return m }

// DeleteReceivingMethodRequestValidationError is the validation error returned
// by DeleteReceivingMethodRequest.Validate if the designated constraints
// aren't met.
type DeleteReceivingMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReceivingMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReceivingMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReceivingMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReceivingMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReceivingMethodRequestValidationError) ErrorName() string {
	return "DeleteReceivingMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReceivingMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReceivingMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReceivingMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReceivingMethodRequestValidationError{}

// Validate checks the field values on AddReceivingMethodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddReceivingMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReceivingMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddReceivingMethodRequestMultiError, or nil if none found.
func (m *AddReceivingMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReceivingMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := AddReceivingMethodRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddReceivingMethodRequest_Method_InLookup[m.GetMethod()]; !ok {
		err := AddReceivingMethodRequestValidationError{
			field:  "Method",
			reason: "value must be in list [bankcard wechat alipay e_cny]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRealName()) < 1 {
		err := AddReceivingMethodRequestValidationError{
			field:  "RealName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddReceivingMethodRequest_RealName_Pattern.MatchString(m.GetRealName()) {
		err := AddReceivingMethodRequestValidationError{
			field:  "RealName",
			reason: "value does not match regex pattern \"^[a-zA-Z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCardNo()) < 1 {
		err := AddReceivingMethodRequestValidationError{
			field:  "CardNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddReceivingMethodRequest_CardNo_Pattern.MatchString(m.GetCardNo()) {
		err := AddReceivingMethodRequestValidationError{
			field:  "CardNo",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOpenBank()) < 1 {
		err := AddReceivingMethodRequestValidationError{
			field:  "OpenBank",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddReceivingMethodRequest_OpenBank_Pattern.MatchString(m.GetOpenBank()) {
		err := AddReceivingMethodRequestValidationError{
			field:  "OpenBank",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBankBranch()) < 1 {
		err := AddReceivingMethodRequestValidationError{
			field:  "BankBranch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddReceivingMethodRequest_BankBranch_Pattern.MatchString(m.GetBankBranch()) {
		err := AddReceivingMethodRequestValidationError{
			field:  "BankBranch",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNickname()) < 1 {
		err := AddReceivingMethodRequestValidationError{
			field:  "Nickname",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddReceivingMethodRequest_Nickname_Pattern.MatchString(m.GetNickname()) {
		err := AddReceivingMethodRequestValidationError{
			field:  "Nickname",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddReceivingMethodRequest_QrcodeUrl_Pattern.MatchString(m.GetQrcodeUrl()) {
		err := AddReceivingMethodRequestValidationError{
			field:  "QrcodeUrl",
			reason: "value does not match regex pattern \"^(http|https)://[^\\\\s]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetECnyNo()) < 1 {
		err := AddReceivingMethodRequestValidationError{
			field:  "ECnyNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddReceivingMethodRequest_ECnyNo_Pattern.MatchString(m.GetECnyNo()) {
		err := AddReceivingMethodRequestValidationError{
			field:  "ECnyNo",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddReceivingMethodRequestMultiError(errors)
	}

	return nil
}

// AddReceivingMethodRequestMultiError is an error wrapping multiple validation
// errors returned by AddReceivingMethodRequest.ValidateAll() if the
// designated constraints aren't met.
type AddReceivingMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReceivingMethodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReceivingMethodRequestMultiError) AllErrors() []error { return m }

// AddReceivingMethodRequestValidationError is the validation error returned by
// AddReceivingMethodRequest.Validate if the designated constraints aren't met.
type AddReceivingMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReceivingMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReceivingMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReceivingMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReceivingMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReceivingMethodRequestValidationError) ErrorName() string {
	return "AddReceivingMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddReceivingMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReceivingMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReceivingMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReceivingMethodRequestValidationError{}

var _AddReceivingMethodRequest_Method_InLookup = map[string]struct{}{
	"bankcard": {},
	"wechat":   {},
	"alipay":   {},
	"e_cny":    {},
}

var _AddReceivingMethodRequest_RealName_Pattern = regexp.MustCompile("^[a-zA-Z]+$")

var _AddReceivingMethodRequest_CardNo_Pattern = regexp.MustCompile("^[0-9]+$")

var _AddReceivingMethodRequest_OpenBank_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

var _AddReceivingMethodRequest_BankBranch_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

var _AddReceivingMethodRequest_Nickname_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

var _AddReceivingMethodRequest_QrcodeUrl_Pattern = regexp.MustCompile("^(http|https)://[^\\s]+$")

var _AddReceivingMethodRequest_ECnyNo_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on UpdateReceivingMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReceivingMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReceivingMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReceivingMethodRequestMultiError, or nil if none found.
func (m *UpdateReceivingMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReceivingMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateReceivingMethodRequest_Method_InLookup[m.GetMethod()]; !ok {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "Method",
			reason: "value must be in list [bankcard wechat alipay e_cny]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRealName()) < 1 {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "RealName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateReceivingMethodRequest_RealName_Pattern.MatchString(m.GetRealName()) {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "RealName",
			reason: "value does not match regex pattern \"^[a-zA-Z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCardNo()) < 1 {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "CardNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateReceivingMethodRequest_CardNo_Pattern.MatchString(m.GetCardNo()) {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "CardNo",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOpenBank()) < 1 {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "OpenBank",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateReceivingMethodRequest_OpenBank_Pattern.MatchString(m.GetOpenBank()) {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "OpenBank",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBankBranch()) < 1 {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "BankBranch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateReceivingMethodRequest_BankBranch_Pattern.MatchString(m.GetBankBranch()) {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "BankBranch",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNickname()) < 1 {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "Nickname",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateReceivingMethodRequest_Nickname_Pattern.MatchString(m.GetNickname()) {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "Nickname",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateReceivingMethodRequest_QrcodeUrl_Pattern.MatchString(m.GetQrcodeUrl()) {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "QrcodeUrl",
			reason: "value does not match regex pattern \"^(http|https)://[^\\\\s]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetECnyNo()) < 1 {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "ECnyNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateReceivingMethodRequest_ECnyNo_Pattern.MatchString(m.GetECnyNo()) {
		err := UpdateReceivingMethodRequestValidationError{
			field:  "ECnyNo",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateReceivingMethodRequestMultiError(errors)
	}

	return nil
}

// UpdateReceivingMethodRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateReceivingMethodRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateReceivingMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReceivingMethodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReceivingMethodRequestMultiError) AllErrors() []error { return m }

// UpdateReceivingMethodRequestValidationError is the validation error returned
// by UpdateReceivingMethodRequest.Validate if the designated constraints
// aren't met.
type UpdateReceivingMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReceivingMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReceivingMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReceivingMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReceivingMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReceivingMethodRequestValidationError) ErrorName() string {
	return "UpdateReceivingMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReceivingMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReceivingMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReceivingMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReceivingMethodRequestValidationError{}

var _UpdateReceivingMethodRequest_Method_InLookup = map[string]struct{}{
	"bankcard": {},
	"wechat":   {},
	"alipay":   {},
	"e_cny":    {},
}

var _UpdateReceivingMethodRequest_RealName_Pattern = regexp.MustCompile("^[a-zA-Z]+$")

var _UpdateReceivingMethodRequest_CardNo_Pattern = regexp.MustCompile("^[0-9]+$")

var _UpdateReceivingMethodRequest_OpenBank_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

var _UpdateReceivingMethodRequest_BankBranch_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

var _UpdateReceivingMethodRequest_Nickname_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

var _UpdateReceivingMethodRequest_QrcodeUrl_Pattern = regexp.MustCompile("^(http|https)://[^\\s]+$")

var _UpdateReceivingMethodRequest_ECnyNo_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on GetAccountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountRequestMultiError, or nil if none found.
func (m *GetAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := GetAccountRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountRequestMultiError(errors)
	}

	return nil
}

// GetAccountRequestMultiError is an error wrapping multiple validation errors
// returned by GetAccountRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountRequestMultiError) AllErrors() []error { return m }

// GetAccountRequestValidationError is the validation error returned by
// GetAccountRequest.Validate if the designated constraints aren't met.
type GetAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountRequestValidationError) ErrorName() string {
	return "GetAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountRequestValidationError{}

// Validate checks the field values on RegisterAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAccountRequestMultiError, or nil if none found.
func (m *RegisterAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsr()); l < 6 || l > 32 {
		err := RegisterAccountRequestValidationError{
			field:  "Usr",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterAccountRequest_Usr_Pattern.MatchString(m.GetUsr()) {
		err := RegisterAccountRequestValidationError{
			field:  "Usr",
			reason: "value does not match regex pattern \"^[^\\\\s]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPwd()); l < 60 || l > 100 {
		err := RegisterAccountRequestValidationError{
			field:  "Pwd",
			reason: "value length must be between 60 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterAccountRequest_Pwd_Pattern.MatchString(m.GetPwd()) {
		err := RegisterAccountRequestValidationError{
			field:  "Pwd",
			reason: "value does not match regex pattern \"^[^\\\\s]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterAccountRequest_Lang_Pattern.MatchString(m.GetLang()) {
		err := RegisterAccountRequestValidationError{
			field:  "Lang",
			reason: "value does not match regex pattern \"^[a-z]{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterAccountRequest_DeviceId_Pattern.MatchString(m.GetDeviceId()) {
		err := RegisterAccountRequestValidationError{
			field:  "DeviceId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterAccountRequest_TimeZone_Pattern.MatchString(m.GetTimeZone()) {
		err := RegisterAccountRequestValidationError{
			field:  "TimeZone",
			reason: "value does not match regex pattern \"^[A-Za-z_]+/[A-Za-z_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _RegisterAccountRequest_Currency_InLookup[m.GetCurrency()]; !ok {
		err := RegisterAccountRequestValidationError{
			field:  "Currency",
			reason: "value must be in list [CNY USD EUR JPY GBP AUD CAD CHF HKD NZD KRW IDR VND TWD SGD BRL MOP USDT]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterAccountRequestMultiError(errors)
	}

	return nil
}

// RegisterAccountRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAccountRequestMultiError) AllErrors() []error { return m }

// RegisterAccountRequestValidationError is the validation error returned by
// RegisterAccountRequest.Validate if the designated constraints aren't met.
type RegisterAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAccountRequestValidationError) ErrorName() string {
	return "RegisterAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAccountRequestValidationError{}

var _RegisterAccountRequest_Usr_Pattern = regexp.MustCompile("^[^\\s]+$")

var _RegisterAccountRequest_Pwd_Pattern = regexp.MustCompile("^[^\\s]+$")

var _RegisterAccountRequest_Lang_Pattern = regexp.MustCompile("^[a-z]{2}$")

var _RegisterAccountRequest_DeviceId_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+$")

var _RegisterAccountRequest_TimeZone_Pattern = regexp.MustCompile("^[A-Za-z_]+/[A-Za-z_]+$")

var _RegisterAccountRequest_Currency_InLookup = map[string]struct{}{
	"CNY":  {},
	"USD":  {},
	"EUR":  {},
	"JPY":  {},
	"GBP":  {},
	"AUD":  {},
	"CAD":  {},
	"CHF":  {},
	"HKD":  {},
	"NZD":  {},
	"KRW":  {},
	"IDR":  {},
	"VND":  {},
	"TWD":  {},
	"SGD":  {},
	"BRL":  {},
	"MOP":  {},
	"USDT": {},
}

// Validate checks the field values on UpdateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountRequestMultiError, or nil if none found.
func (m *UpdateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := UpdateAccountRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateAccountRequest_Lang_Pattern.MatchString(m.GetLang()) {
		err := UpdateAccountRequestValidationError{
			field:  "Lang",
			reason: "value does not match regex pattern \"^[a-z]{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateAccountRequest_Currency_InLookup[m.GetCurrency()]; !ok {
		err := UpdateAccountRequestValidationError{
			field:  "Currency",
			reason: "value must be in list [CNY USD EUR JPY GBP AUD CAD CHF HKD NZD KRW IDR VND TWD SGD BRL MOP USDT]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSecPwd()); l < 60 || l > 100 {
		err := UpdateAccountRequestValidationError{
			field:  "SecPwd",
			reason: "value length must be between 60 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateAccountRequest_SecPwd_Pattern.MatchString(m.GetSecPwd()) {
		err := UpdateAccountRequestValidationError{
			field:  "SecPwd",
			reason: "value does not match regex pattern \"^[^\\\\s]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountRequestMultiError) AllErrors() []error { return m }

// UpdateAccountRequestValidationError is the validation error returned by
// UpdateAccountRequest.Validate if the designated constraints aren't met.
type UpdateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountRequestValidationError) ErrorName() string {
	return "UpdateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountRequestValidationError{}

var _UpdateAccountRequest_Lang_Pattern = regexp.MustCompile("^[a-z]{2}$")

var _UpdateAccountRequest_Currency_InLookup = map[string]struct{}{
	"CNY":  {},
	"USD":  {},
	"EUR":  {},
	"JPY":  {},
	"GBP":  {},
	"AUD":  {},
	"CAD":  {},
	"CHF":  {},
	"HKD":  {},
	"NZD":  {},
	"KRW":  {},
	"IDR":  {},
	"VND":  {},
	"TWD":  {},
	"SGD":  {},
	"BRL":  {},
	"MOP":  {},
	"USDT": {},
}

var _UpdateAccountRequest_SecPwd_Pattern = regexp.MustCompile("^[^\\s]+$")
