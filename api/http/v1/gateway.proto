syntax = "proto3";

package api.http.v1;

option go_package = "api_gateway_service/api/http/v1;v1";
option java_multiple_files = true;
option java_package = "api.http.v1";
option objc_class_prefix = "ApiHttpV1";

import "common/common.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "openapi/v3/annotations.proto";

// 用户账户
service Account {
  // 注册账户
  rpc RegisterAccount (RegisterAccountRequest) returns (common.Reply) {
    option (google.api.http) = {
      post: "/v1/user/accounts"
      body: "*"
    };
    option (openapi.v3.operation) = {
      summary: "注册账户",
      description: "为新用户注册一个账户",
    };
  }
  // 读取账户
  rpc GetAccount (GetAccountRequest) returns (common.Reply) {
    option (google.api.http) = {
      get: "/v1/user/accounts/{uid}"
    };
    option (openapi.v3.operation) = {
      summary: "读取账户",
      description: "获取指定用户ID的账户信息",
    };
  }
  // 更新账户
  rpc UpdateAccount (UpdateAccountRequest) returns (common.Reply) {
    option (google.api.http) = {
      put: "/v1/user/accounts/{uid}"
      body: "*"
    };
    option (openapi.v3.operation) = {
      summary: "更新账户",
      description: "更新用户的账户信息",
    };
  }
}

// 地址簿
service Addresses {
  // 地址簿列表
  rpc ListAddresses (google.protobuf.Empty) returns (common.Reply) {
    option (google.api.http) = {
      get: "/v1/user/addresses"
    };
    option (openapi.v3.operation) = {
      summary: "获取地址簿列表",
      description: "获取用户的所有地址簿条目",
    };
  }
  // 读取单条地址
  rpc GetAddress (GetAddressRequest) returns (common.Reply) {
    option (google.api.http) = {
      get: "/v1/user/addresses/{id}"
    };
    option (openapi.v3.operation) = {
      summary: "获取单条地址",
      description: "获取用户的单条地址簿条目",
    };
  }
  // 添加地址
  rpc AddAddress (AddAddressRequest) returns (common.Reply) {
    option (google.api.http) = {
      post: "/v1/user/addresses"
      body: "*"
    };
    option (openapi.v3.operation) = {
      summary: "添加地址",
      description: "为用户添加新的地址簿条目",
    };
  }
  // 更新地址
  rpc UpdateAddress (UpdateAddressRequest) returns (common.Reply) {
    option (google.api.http) = {
      put: "/v1/user/addresses/{id}"
      body: "*"
    };
    option (openapi.v3.operation) = {
      summary: "更新地址",
      description: "更新用户的地址簿条目",
    };
  }
  // 删除地址
  rpc DeleteAddress (DeleteAddressRequest) returns (common.Reply) {
    option (google.api.http) = {
      delete: "/v1/user/addresses/{id}"
    };
    option (openapi.v3.operation) = {
      summary: "删除地址",
      description: "删除用户的地址簿条目",
    };
  }
}

// 收款方式
service ReceivingMethods {
  // 收款方式列表
  rpc ListReceivingMethods (google.protobuf.Empty) returns (common.Reply) {
    option (google.api.http) = {
      get: "/v1/user/receiving-methods"
    };
    option (openapi.v3.operation) = {
      summary: "获取收款方式列表",
      description: "获取用户的所有收款方式列表",
      tags: "ReceivingMethods"
    };
  }

  // 获取单个收款方式
  rpc GetReceivingMethod (GetReceivingMethodRequest) returns (common.Reply) {
    option (google.api.http) = {
      get: "/v1/user/receiving-methods/{id}"
    };
    option (openapi.v3.operation) = {
      summary: "获取单个收款方式",
      description: "获取指定ID的收款方式",
      tags: "ReceivingMethods"
    };
  }

  // 添加收款方式
  rpc AddReceivingMethod (AddReceivingMethodRequest) returns (common.Reply) {
    option (google.api.http) = {
      post: "/v1/user/receiving-methods"
      body: "*"
    };
    option (openapi.v3.operation) = {
      summary: "添加收款方式",
      description: "为用户添加新的收款方式",
      tags: "ReceivingMethods"
    };
  }

  // 更新收款方式
  rpc UpdateReceivingMethod (UpdateReceivingMethodRequest) returns (common.Reply) {
    option (google.api.http) = {
      put: "/v1/user/receiving-methods/{id}"
      body: "*"
    };
    option (openapi.v3.operation) = {
      summary: "更新收款方式",
      description: "更新用户的收款方式信息",
      tags: "ReceivingMethods"
    };
  }

  // 删除收款方式
  rpc DeleteReceivingMethod (DeleteReceivingMethodRequest) returns (common.Reply) {
    option (google.api.http) = {
      delete: "/v1/user/receiving-methods/{id}"
    };
    option (openapi.v3.operation) = {
      summary: "删除收款方式",
      description: "删除用户的收款方式",
      tags: "ReceivingMethods"
    };
  }
}

/**地址簿**/
message GetAddressRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}
message AddAddressRequest {
  string coinName = 1 [(validate.rules).string = {pattern: "^[A-Z0-9-]+$", min_len: 2, ignore_empty: false}];
  string address = 2 [(validate.rules).string = {pattern: "^[a-zA-Z0-9]+$", min_len: 20, ignore_empty: false}];
  string remark = 3 [(validate.rules).string = {min_len: 0, ignore_empty: true}];
}
message DeleteAddressRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}
message UpdateAddressRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  string coinName = 2 [(validate.rules).string = {pattern: "^[A-Z0-9-]+$", min_len: 2, ignore_empty: false}];
  string address = 3 [(validate.rules).string = {pattern: "^[a-zA-Z0-9]+$", min_len: 20, ignore_empty: false}];
  string remark = 4 [(validate.rules).string = {min_len: 0, ignore_empty: true}];
}

message GetReceivingMethodRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}
message DeleteReceivingMethodRequest {
  uint64 uid = 1 [(validate.rules).uint64 = {gt: 0}];
  uint64 id = 2 [(validate.rules).uint64 = {gt: 0}];
}
message AddReceivingMethodRequest {
  uint64 uid = 1 [(validate.rules).uint64 = {gt: 0}];
  string method = 2 [(validate.rules).string = {in: ["bankcard", "wechat", "alipay", "e_cny"]}];
  string realName = 3 [(validate.rules).string = {pattern: "^[a-zA-Z]+$", min_len: 1, ignore_empty: false}];
  string cardNo = 4 [(validate.rules).string = {pattern: "^[0-9]+$", min_len: 1, ignore_empty: false}];
  string openBank = 5 [(validate.rules).string = {pattern: "^[a-zA-Z0-9]+$", min_len: 1, ignore_empty: false}];
  string bankBranch = 6 [(validate.rules).string = {pattern: "^[a-zA-Z0-9]+$", min_len: 1, ignore_empty: false}];
  string nickname = 7 [(validate.rules).string = {pattern: "^[a-zA-Z0-9]+$", min_len: 1, ignore_empty: false}];
  string qrcodeUrl = 8 [(validate.rules).string = {pattern: "^(http|https)://[^\\s]+$"}];
  string eCnyNo = 9 [(validate.rules).string = {pattern: "^[0-9]+$", min_len: 1, ignore_empty: false}];
}
message UpdateReceivingMethodRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  uint64 uid = 2 [(validate.rules).uint64 = {gt: 0}];
  string method = 3 [(validate.rules).string = {in: ["bankcard", "wechat", "alipay", "e_cny"]}];
  string realName = 4 [(validate.rules).string = {pattern: "^[a-zA-Z]+$", min_len: 1, ignore_empty: false}];
  string cardNo = 5 [(validate.rules).string = {pattern: "^[0-9]+$", min_len: 1, ignore_empty: false}];
  string openBank = 6 [(validate.rules).string = {pattern: "^[a-zA-Z0-9]+$", min_len: 1, ignore_empty: false}];
  string bankBranch = 7 [(validate.rules).string = {pattern: "^[a-zA-Z0-9]+$", min_len: 1, ignore_empty: false}];
  string nickname = 8 [(validate.rules).string = {pattern: "^[a-zA-Z0-9]+$", min_len: 1, ignore_empty: false}];
  string qrcodeUrl = 9 [(validate.rules).string = {pattern: "^(http|https)://[^\\s]+$"}];
  string eCnyNo = 10 [(validate.rules).string = {pattern: "^[0-9]+$", min_len: 1, ignore_empty: false}];
}


message GetAccountRequest {
  uint64 uid = 1 [(validate.rules).uint64 = {gt: 0}];
}
message RegisterAccountRequest {
  // 用户名，长度必须在 6 到 32 个字符之间，不允许包含空格
  string usr = 1 [(validate.rules).string = {min_len: 6, max_len: 32, pattern: "^[^\\s]+$", ignore_empty: false}];
  // 密码，长度必须在 60 到 100 个字符之间，不允许包含空格
  string pwd = 2 [(validate.rules).string = {min_len: 60, max_len: 100, pattern: "^[^\\s]+$", ignore_empty: false}];
  // 语言代码，必须为两个小写字母的 ISO 639-1 语言代码
  string lang = 3 [(validate.rules).string = {pattern: "^[a-z]{2}$", ignore_empty: false}];
  // 设备 ID，必须仅包含大小写字母、数字和下划线
  string deviceId = 4 [(validate.rules).string = {pattern: "^[a-zA-Z0-9_]+$", ignore_empty: false}];
  // 时区，必须为合法的时区格式，例如 "Asia/Shanghai"
  string timeZone = 5 [(validate.rules).string = {pattern: "^[A-Za-z_]+/[A-Za-z_]+$", ignore_empty: false}];
  // 货币代码，必须为指定的合法货币代码，且必须为大写
  string currency = 6 [(validate.rules).string = {in: ["CNY", "USD", "EUR", "JPY", "GBP", "AUD", "CAD", "CHF", "HKD", "NZD", "KRW", "IDR", "VND", "TWD", "SGD", "BRL", "MOP", "USDT"], ignore_empty: false}];
}

message UpdateAccountRequest {
  // 用户 ID，必须为大于 0 的正整数
  uint64 uid = 1 [(validate.rules).uint64 = {gt: 0}];
  // 语言代码，必须为两个小写字母的 ISO 639-1 语言代码
  string lang = 2 [(validate.rules).string = {pattern: "^[a-z]{2}$", ignore_empty: false}];
  // 货币代码，必须为指定的合法货币代码，服务端将强制统一转换为大写
  string currency = 3 [(validate.rules).string = {in: ["CNY", "USD", "EUR", "JPY", "GBP", "AUD", "CAD", "CHF", "HKD", "NZD", "KRW", "IDR", "VND", "TWD", "SGD", "BRL", "MOP", "USDT"], ignore_empty: false}];
  // 安全密码，长度必须在 60 到 100 个字符之间，不允许包含空格
  string secPwd = 4 [(validate.rules).string = {min_len: 60, max_len: 100, pattern: "^[^\\s]+$", ignore_empty: false}];
}
