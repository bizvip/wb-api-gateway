// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: http/v1/gateway.proto

package v1

import (
	common "api_gateway_service/api/common"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Gateway_RegisterAccount_FullMethodName     = "/api.http.v1.Gateway/RegisterAccount"
	Gateway_GetAccountInfo_FullMethodName      = "/api.http.v1.Gateway/GetAccountInfo"
	Gateway_UpdateAccount_FullMethodName       = "/api.http.v1.Gateway/UpdateAccount"
	Gateway_ListAddress_FullMethodName         = "/api.http.v1.Gateway/ListAddress"
	Gateway_AddAddress_FullMethodName          = "/api.http.v1.Gateway/AddAddress"
	Gateway_UpdateAddress_FullMethodName       = "/api.http.v1.Gateway/UpdateAddress"
	Gateway_DelAddress_FullMethodName          = "/api.http.v1.Gateway/DelAddress"
	Gateway_ListPaymentMethods_FullMethodName  = "/api.http.v1.Gateway/ListPaymentMethods"
	Gateway_AddPaymentMethod_FullMethodName    = "/api.http.v1.Gateway/AddPaymentMethod"
	Gateway_UpdatePaymentMethod_FullMethodName = "/api.http.v1.Gateway/UpdatePaymentMethod"
	Gateway_DelPaymentMethod_FullMethodName    = "/api.http.v1.Gateway/DelPaymentMethod"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 全部http接口
type GatewayClient interface {
	// 注册账户
	RegisterAccount(ctx context.Context, in *RegisterAccountReq, opts ...grpc.CallOption) (*common.Res, error)
	// 通用读取账户信息
	GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*common.Res, error)
	// 更新用户账户数据
	UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*common.Res, error)
	// 地址簿
	ListAddress(ctx context.Context, in *ListAddressReq, opts ...grpc.CallOption) (*common.Res, error)
	AddAddress(ctx context.Context, in *AddAddressReq, opts ...grpc.CallOption) (*common.Res, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...grpc.CallOption) (*common.Res, error)
	DelAddress(ctx context.Context, in *DelAddressReq, opts ...grpc.CallOption) (*common.Res, error)
	// 支付管理
	ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsReq, opts ...grpc.CallOption) (*common.Res, error)
	AddPaymentMethod(ctx context.Context, in *AddPaymentMethodReq, opts ...grpc.CallOption) (*common.Res, error)
	UpdatePaymentMethod(ctx context.Context, in *UpdatePaymentMethodReq, opts ...grpc.CallOption) (*common.Res, error)
	DelPaymentMethod(ctx context.Context, in *DelPaymentMethodReq, opts ...grpc.CallOption) (*common.Res, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) RegisterAccount(ctx context.Context, in *RegisterAccountReq, opts ...grpc.CallOption) (*common.Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Res)
	err := c.cc.Invoke(ctx, Gateway_RegisterAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*common.Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Res)
	err := c.cc.Invoke(ctx, Gateway_GetAccountInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*common.Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Res)
	err := c.cc.Invoke(ctx, Gateway_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListAddress(ctx context.Context, in *ListAddressReq, opts ...grpc.CallOption) (*common.Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Res)
	err := c.cc.Invoke(ctx, Gateway_ListAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AddAddress(ctx context.Context, in *AddAddressReq, opts ...grpc.CallOption) (*common.Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Res)
	err := c.cc.Invoke(ctx, Gateway_AddAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...grpc.CallOption) (*common.Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Res)
	err := c.cc.Invoke(ctx, Gateway_UpdateAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DelAddress(ctx context.Context, in *DelAddressReq, opts ...grpc.CallOption) (*common.Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Res)
	err := c.cc.Invoke(ctx, Gateway_DelAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsReq, opts ...grpc.CallOption) (*common.Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Res)
	err := c.cc.Invoke(ctx, Gateway_ListPaymentMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AddPaymentMethod(ctx context.Context, in *AddPaymentMethodReq, opts ...grpc.CallOption) (*common.Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Res)
	err := c.cc.Invoke(ctx, Gateway_AddPaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdatePaymentMethod(ctx context.Context, in *UpdatePaymentMethodReq, opts ...grpc.CallOption) (*common.Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Res)
	err := c.cc.Invoke(ctx, Gateway_UpdatePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DelPaymentMethod(ctx context.Context, in *DelPaymentMethodReq, opts ...grpc.CallOption) (*common.Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Res)
	err := c.cc.Invoke(ctx, Gateway_DelPaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
//
// 全部http接口
type GatewayServer interface {
	// 注册账户
	RegisterAccount(context.Context, *RegisterAccountReq) (*common.Res, error)
	// 通用读取账户信息
	GetAccountInfo(context.Context, *GetAccountInfoReq) (*common.Res, error)
	// 更新用户账户数据
	UpdateAccount(context.Context, *UpdateAccountReq) (*common.Res, error)
	// 地址簿
	ListAddress(context.Context, *ListAddressReq) (*common.Res, error)
	AddAddress(context.Context, *AddAddressReq) (*common.Res, error)
	UpdateAddress(context.Context, *UpdateAddressReq) (*common.Res, error)
	DelAddress(context.Context, *DelAddressReq) (*common.Res, error)
	// 支付管理
	ListPaymentMethods(context.Context, *ListPaymentMethodsReq) (*common.Res, error)
	AddPaymentMethod(context.Context, *AddPaymentMethodReq) (*common.Res, error)
	UpdatePaymentMethod(context.Context, *UpdatePaymentMethodReq) (*common.Res, error)
	DelPaymentMethod(context.Context, *DelPaymentMethodReq) (*common.Res, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) RegisterAccount(context.Context, *RegisterAccountReq) (*common.Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (UnimplementedGatewayServer) GetAccountInfo(context.Context, *GetAccountInfoReq) (*common.Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedGatewayServer) UpdateAccount(context.Context, *UpdateAccountReq) (*common.Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedGatewayServer) ListAddress(context.Context, *ListAddressReq) (*common.Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddress not implemented")
}
func (UnimplementedGatewayServer) AddAddress(context.Context, *AddAddressReq) (*common.Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedGatewayServer) UpdateAddress(context.Context, *UpdateAddressReq) (*common.Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedGatewayServer) DelAddress(context.Context, *DelAddressReq) (*common.Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAddress not implemented")
}
func (UnimplementedGatewayServer) ListPaymentMethods(context.Context, *ListPaymentMethodsReq) (*common.Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentMethods not implemented")
}
func (UnimplementedGatewayServer) AddPaymentMethod(context.Context, *AddPaymentMethodReq) (*common.Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentMethod not implemented")
}
func (UnimplementedGatewayServer) UpdatePaymentMethod(context.Context, *UpdatePaymentMethodReq) (*common.Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentMethod not implemented")
}
func (UnimplementedGatewayServer) DelPaymentMethod(context.Context, *DelPaymentMethodReq) (*common.Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPaymentMethod not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_RegisterAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RegisterAccount(ctx, req.(*RegisterAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAccountInfo(ctx, req.(*GetAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAccount(ctx, req.(*UpdateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ListAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListAddress(ctx, req.(*ListAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AddAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AddAddress(ctx, req.(*AddAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAddress(ctx, req.(*UpdateAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DelAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DelAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DelAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DelAddress(ctx, req.(*DelAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentMethodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ListPaymentMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListPaymentMethods(ctx, req.(*ListPaymentMethodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AddPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaymentMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AddPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AddPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AddPaymentMethod(ctx, req.(*AddPaymentMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdatePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdatePaymentMethod(ctx, req.(*UpdatePaymentMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DelPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPaymentMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DelPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DelPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DelPaymentMethod(ctx, req.(*DelPaymentMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.http.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAccount",
			Handler:    _Gateway_RegisterAccount_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _Gateway_GetAccountInfo_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Gateway_UpdateAccount_Handler,
		},
		{
			MethodName: "ListAddress",
			Handler:    _Gateway_ListAddress_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _Gateway_AddAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _Gateway_UpdateAddress_Handler,
		},
		{
			MethodName: "DelAddress",
			Handler:    _Gateway_DelAddress_Handler,
		},
		{
			MethodName: "ListPaymentMethods",
			Handler:    _Gateway_ListPaymentMethods_Handler,
		},
		{
			MethodName: "AddPaymentMethod",
			Handler:    _Gateway_AddPaymentMethod_Handler,
		},
		{
			MethodName: "UpdatePaymentMethod",
			Handler:    _Gateway_UpdatePaymentMethod_Handler,
		},
		{
			MethodName: "DelPaymentMethod",
			Handler:    _Gateway_DelPaymentMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http/v1/gateway.proto",
}
