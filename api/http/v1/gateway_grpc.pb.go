// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: http/v1/gateway.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Account_RegisterAccount_FullMethodName = "/api.http.v1.Account/RegisterAccount"
	Account_GetAccount_FullMethodName      = "/api.http.v1.Account/GetAccount"
	Account_UpdateAccount_FullMethodName   = "/api.http.v1.Account/UpdateAccount"
)

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户账户
type AccountClient interface {
	// 注册账户
	RegisterAccount(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*Reply, error)
	// 读取账户
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Reply, error)
	// 更新账户
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Reply, error)
}

type accountClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountClient(cc grpc.ClientConnInterface) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) RegisterAccount(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, Account_RegisterAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, Account_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, Account_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
// All implementations must embed UnimplementedAccountServer
// for forward compatibility
//
// 用户账户
type AccountServer interface {
	// 注册账户
	RegisterAccount(context.Context, *RegisterAccountRequest) (*Reply, error)
	// 读取账户
	GetAccount(context.Context, *GetAccountRequest) (*Reply, error)
	// 更新账户
	UpdateAccount(context.Context, *UpdateAccountRequest) (*Reply, error)
	mustEmbedUnimplementedAccountServer()
}

// UnimplementedAccountServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServer struct {
}

func (UnimplementedAccountServer) RegisterAccount(context.Context, *RegisterAccountRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (UnimplementedAccountServer) GetAccount(context.Context, *GetAccountRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountServer) mustEmbedUnimplementedAccountServer() {}

// UnsafeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServer will
// result in compilation errors.
type UnsafeAccountServer interface {
	mustEmbedUnimplementedAccountServer()
}

func RegisterAccountServer(s grpc.ServiceRegistrar, srv AccountServer) {
	s.RegisterService(&Account_ServiceDesc, srv)
}

func _Account_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_RegisterAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).RegisterAccount(ctx, req.(*RegisterAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_ServiceDesc is the grpc.ServiceDesc for Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.http.v1.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAccount",
			Handler:    _Account_RegisterAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Account_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Account_UpdateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http/v1/gateway.proto",
}

const (
	Addresses_ListAddresses_FullMethodName = "/api.http.v1.Addresses/ListAddresses"
	Addresses_GetAddress_FullMethodName    = "/api.http.v1.Addresses/GetAddress"
	Addresses_AddAddress_FullMethodName    = "/api.http.v1.Addresses/AddAddress"
	Addresses_UpdateAddress_FullMethodName = "/api.http.v1.Addresses/UpdateAddress"
	Addresses_DeleteAddress_FullMethodName = "/api.http.v1.Addresses/DeleteAddress"
)

// AddressesClient is the client API for Addresses service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 地址簿
type AddressesClient interface {
	// 地址簿列表
	ListAddresses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Reply, error)
	// 读取单条地址
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Reply, error)
	// 添加地址
	AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*Reply, error)
	// 更新地址
	UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*Reply, error)
	// 删除地址
	DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*Reply, error)
}

type addressesClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressesClient(cc grpc.ClientConnInterface) AddressesClient {
	return &addressesClient{cc}
}

func (c *addressesClient) ListAddresses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, Addresses_ListAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, Addresses_GetAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesClient) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, Addresses_AddAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, Addresses_UpdateAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesClient) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, Addresses_DeleteAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressesServer is the server API for Addresses service.
// All implementations must embed UnimplementedAddressesServer
// for forward compatibility
//
// 地址簿
type AddressesServer interface {
	// 地址簿列表
	ListAddresses(context.Context, *emptypb.Empty) (*Reply, error)
	// 读取单条地址
	GetAddress(context.Context, *GetAddressRequest) (*Reply, error)
	// 添加地址
	AddAddress(context.Context, *AddAddressRequest) (*Reply, error)
	// 更新地址
	UpdateAddress(context.Context, *UpdateAddressRequest) (*Reply, error)
	// 删除地址
	DeleteAddress(context.Context, *DeleteAddressRequest) (*Reply, error)
	mustEmbedUnimplementedAddressesServer()
}

// UnimplementedAddressesServer must be embedded to have forward compatible implementations.
type UnimplementedAddressesServer struct {
}

func (UnimplementedAddressesServer) ListAddresses(context.Context, *emptypb.Empty) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (UnimplementedAddressesServer) GetAddress(context.Context, *GetAddressRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedAddressesServer) AddAddress(context.Context, *AddAddressRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedAddressesServer) UpdateAddress(context.Context, *UpdateAddressRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedAddressesServer) DeleteAddress(context.Context, *DeleteAddressRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (UnimplementedAddressesServer) mustEmbedUnimplementedAddressesServer() {}

// UnsafeAddressesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressesServer will
// result in compilation errors.
type UnsafeAddressesServer interface {
	mustEmbedUnimplementedAddressesServer()
}

func RegisterAddressesServer(s grpc.ServiceRegistrar, srv AddressesServer) {
	s.RegisterService(&Addresses_ServiceDesc, srv)
}

func _Addresses_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Addresses_ListAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServer).ListAddresses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Addresses_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Addresses_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Addresses_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Addresses_AddAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServer).AddAddress(ctx, req.(*AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Addresses_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Addresses_UpdateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServer).UpdateAddress(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Addresses_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Addresses_DeleteAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServer).DeleteAddress(ctx, req.(*DeleteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Addresses_ServiceDesc is the grpc.ServiceDesc for Addresses service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Addresses_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.http.v1.Addresses",
	HandlerType: (*AddressesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAddresses",
			Handler:    _Addresses_ListAddresses_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _Addresses_GetAddress_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _Addresses_AddAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _Addresses_UpdateAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _Addresses_DeleteAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http/v1/gateway.proto",
}

const (
	ReceivingMethods_ListReceivingMethods_FullMethodName  = "/api.http.v1.ReceivingMethods/ListReceivingMethods"
	ReceivingMethods_GetReceivingMethod_FullMethodName    = "/api.http.v1.ReceivingMethods/GetReceivingMethod"
	ReceivingMethods_AddReceivingMethod_FullMethodName    = "/api.http.v1.ReceivingMethods/AddReceivingMethod"
	ReceivingMethods_UpdateReceivingMethod_FullMethodName = "/api.http.v1.ReceivingMethods/UpdateReceivingMethod"
	ReceivingMethods_DeleteReceivingMethod_FullMethodName = "/api.http.v1.ReceivingMethods/DeleteReceivingMethod"
)

// ReceivingMethodsClient is the client API for ReceivingMethods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 收款方式
type ReceivingMethodsClient interface {
	// 收款方式列表
	ListReceivingMethods(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Reply, error)
	// 获取单个收款方式
	GetReceivingMethod(ctx context.Context, in *GetReceivingMethodRequest, opts ...grpc.CallOption) (*Reply, error)
	// 添加收款方式
	AddReceivingMethod(ctx context.Context, in *AddReceivingMethodRequest, opts ...grpc.CallOption) (*Reply, error)
	// 更新收款方式
	UpdateReceivingMethod(ctx context.Context, in *UpdateReceivingMethodRequest, opts ...grpc.CallOption) (*Reply, error)
	// 删除收款方式
	DeleteReceivingMethod(ctx context.Context, in *DeleteReceivingMethodRequest, opts ...grpc.CallOption) (*Reply, error)
}

type receivingMethodsClient struct {
	cc grpc.ClientConnInterface
}

func NewReceivingMethodsClient(cc grpc.ClientConnInterface) ReceivingMethodsClient {
	return &receivingMethodsClient{cc}
}

func (c *receivingMethodsClient) ListReceivingMethods(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, ReceivingMethods_ListReceivingMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivingMethodsClient) GetReceivingMethod(ctx context.Context, in *GetReceivingMethodRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, ReceivingMethods_GetReceivingMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivingMethodsClient) AddReceivingMethod(ctx context.Context, in *AddReceivingMethodRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, ReceivingMethods_AddReceivingMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivingMethodsClient) UpdateReceivingMethod(ctx context.Context, in *UpdateReceivingMethodRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, ReceivingMethods_UpdateReceivingMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivingMethodsClient) DeleteReceivingMethod(ctx context.Context, in *DeleteReceivingMethodRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, ReceivingMethods_DeleteReceivingMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceivingMethodsServer is the server API for ReceivingMethods service.
// All implementations must embed UnimplementedReceivingMethodsServer
// for forward compatibility
//
// 收款方式
type ReceivingMethodsServer interface {
	// 收款方式列表
	ListReceivingMethods(context.Context, *emptypb.Empty) (*Reply, error)
	// 获取单个收款方式
	GetReceivingMethod(context.Context, *GetReceivingMethodRequest) (*Reply, error)
	// 添加收款方式
	AddReceivingMethod(context.Context, *AddReceivingMethodRequest) (*Reply, error)
	// 更新收款方式
	UpdateReceivingMethod(context.Context, *UpdateReceivingMethodRequest) (*Reply, error)
	// 删除收款方式
	DeleteReceivingMethod(context.Context, *DeleteReceivingMethodRequest) (*Reply, error)
	mustEmbedUnimplementedReceivingMethodsServer()
}

// UnimplementedReceivingMethodsServer must be embedded to have forward compatible implementations.
type UnimplementedReceivingMethodsServer struct {
}

func (UnimplementedReceivingMethodsServer) ListReceivingMethods(context.Context, *emptypb.Empty) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivingMethods not implemented")
}
func (UnimplementedReceivingMethodsServer) GetReceivingMethod(context.Context, *GetReceivingMethodRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivingMethod not implemented")
}
func (UnimplementedReceivingMethodsServer) AddReceivingMethod(context.Context, *AddReceivingMethodRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReceivingMethod not implemented")
}
func (UnimplementedReceivingMethodsServer) UpdateReceivingMethod(context.Context, *UpdateReceivingMethodRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivingMethod not implemented")
}
func (UnimplementedReceivingMethodsServer) DeleteReceivingMethod(context.Context, *DeleteReceivingMethodRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReceivingMethod not implemented")
}
func (UnimplementedReceivingMethodsServer) mustEmbedUnimplementedReceivingMethodsServer() {}

// UnsafeReceivingMethodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceivingMethodsServer will
// result in compilation errors.
type UnsafeReceivingMethodsServer interface {
	mustEmbedUnimplementedReceivingMethodsServer()
}

func RegisterReceivingMethodsServer(s grpc.ServiceRegistrar, srv ReceivingMethodsServer) {
	s.RegisterService(&ReceivingMethods_ServiceDesc, srv)
}

func _ReceivingMethods_ListReceivingMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingMethodsServer).ListReceivingMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingMethods_ListReceivingMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingMethodsServer).ListReceivingMethods(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivingMethods_GetReceivingMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceivingMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingMethodsServer).GetReceivingMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingMethods_GetReceivingMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingMethodsServer).GetReceivingMethod(ctx, req.(*GetReceivingMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivingMethods_AddReceivingMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReceivingMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingMethodsServer).AddReceivingMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingMethods_AddReceivingMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingMethodsServer).AddReceivingMethod(ctx, req.(*AddReceivingMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivingMethods_UpdateReceivingMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceivingMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingMethodsServer).UpdateReceivingMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingMethods_UpdateReceivingMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingMethodsServer).UpdateReceivingMethod(ctx, req.(*UpdateReceivingMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivingMethods_DeleteReceivingMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReceivingMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingMethodsServer).DeleteReceivingMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceivingMethods_DeleteReceivingMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingMethodsServer).DeleteReceivingMethod(ctx, req.(*DeleteReceivingMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceivingMethods_ServiceDesc is the grpc.ServiceDesc for ReceivingMethods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceivingMethods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.http.v1.ReceivingMethods",
	HandlerType: (*ReceivingMethodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReceivingMethods",
			Handler:    _ReceivingMethods_ListReceivingMethods_Handler,
		},
		{
			MethodName: "GetReceivingMethod",
			Handler:    _ReceivingMethods_GetReceivingMethod_Handler,
		},
		{
			MethodName: "AddReceivingMethod",
			Handler:    _ReceivingMethods_AddReceivingMethod_Handler,
		},
		{
			MethodName: "UpdateReceivingMethod",
			Handler:    _ReceivingMethods_UpdateReceivingMethod_Handler,
		},
		{
			MethodName: "DeleteReceivingMethod",
			Handler:    _ReceivingMethods_DeleteReceivingMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http/v1/gateway.proto",
}
